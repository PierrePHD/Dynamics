AAVZ
PR_Update
DEBPROC PR_Update;
*
*
*!!!!!!! Ajouter conribution des modes 'IMP' 'INI' 'CAL';
*
*


* Maillage necessaire pour creer les objets de calculs
*   Rigidite et Second membre
SI ((VALE 'DIME') > 2) ;
  P_1 = 0. 0. 0. ;
SINON ;
  P_1 = 0. 0. ;
FINSI ;
MAI1 = MANU POI1 P_1  ;

TaiSys = DIMENSION FamiF.Cal;
Lis1Up = PROG ((TaiSys*3)**2)* 0. ;
Lis1Init = PROG (TaiSys**2)* 0. ;

LISU_ini = MOTS ;
LISF_ini = MOTS ;
REPE BCL1M TaiSys ;
    Num = ((3 * (&BCL1M - 1) ) + 1);
    COU1 = CHAIN 'U' Num ;
    COF1 = CHAIN 'F' Num ;
    LISU_ini = LISU_ini ET (MOTS COU1) ;
    LISF_ini = LISF_ini ET (MOTS COF1) ;
FIN BCL1M ;


LISU_tot = MOTS ;
LISF_tot = MOTS ;
REPE BCL1M (TaiSys*3) ;
    COU1 = CHAIN 'U' &BCL1M ;
    COF1 = CHAIN 'F' &BCL1M ;
    LISU_tot = LISU_tot ET (MOTS COU1) ;
    LISF_tot = LISF_tot ET (MOTS COF1) ;
FIN BCL1M ;

Cha_proj = TABLE;
Cha_proj.Ffi = TABLE;
Cha_proj.F_t = TABLE;
Cha_proj.Ff_init = TABLE;


* Projection F . f_espa_i
    NbCharg = DIMENSION CHA_TOT ;
    SI (NbCharg > 0);

        LFOR = MOTS FX FY FZ FR FT MX MY MZ MT ;
        L_f = MOTS UX UY UZ UR UT RX RY RZ RT ;

        REPETER It_1 NbCharg ;
            CHA_i = EXTR CHA_TOT CHAR &It_1 ;
            CHP = EXTR CHA_i CHAM ;

            EVO_1 = EXTR CHA_i EVOL;
            Cha_proj.F_t.&It_1 = EXTR EVO_1 ORDO ;
            Lis_Ffi = PROG;
            Lis_Init = PROG;
            REPETER It_2 TaiSys;
                f_i = FamiF.Cal.&It_2;
                FOR_proj = XTY CHP f_i LFOR L_f;
                Lis_Init = Lis_Init ET (PROG FOR_proj);
                Lis_Ffi = Lis_Ffi ET (PROG FOR_proj 0 0);
            FIN It_2;
            * Modifier , passer d une liste a un chpoint
            CHP1 = MANU 'CHPO' MAI1 LISF_ini Lis_Init;
            Cha_proj.Ff_init.&It_1 = CHP1;
            CHP1 = MANU 'CHPO' MAI1 LISF_tot Lis_Ffi;
            Cha_proj.Ffi.&It_1 = CHP1;

        FIN It_1 ;
    FINSI;

RESPRO Cha_proj;


* Matrice Pij =
* [  fi*K*fj     fi*C*fj     fi*M*fj ;
*   -dt*gamma       1           0    ;
*   -beta*dt^2      0           1   ];

* Matrice des Pij assembles
REPETER It_1 TaiSys;
    REPETER It_2 3;
        Ind_Lign = ((&It_1-1)*3) + (&It_2-1) + 1;
        SI (&It_2 ega 1);
            REPETER It_3 TaiSys;
                f_ligne = FamiF.Cal.&It_1;
                REPETER It_4 3;
                    f_colo = FamiF.Cal.&It_3;
                    ind_List = (Ind_Lign-1)*(TaiSys*3)
                    + ((&It_3-1)*3) + &It_4;
                    SI (&It_4 ega 1);
                        Val1 = YTMX f_colo f_ligne M ;
                    FINSI;
                    SI (&It_4 ega 2);
                        Val1 = YTMX f_colo f_ligne C ;
                    FINSI;
                    SI (&It_4 ega 3);
                        Val1 = YTMX f_colo f_ligne K ;
                        ind_Init = ((&It_1 - 1) *TaiSys)
                        + (&It_3 - 1) + 1 ;
                        REMPLACER Lis1Init ind_Init Val1;
                    FINSI;
                    REMPLACER Lis1Up ind_List Val1;
                FIN It_4;
            FIN It_3;
        FINSI;
        SI (&It_2 ega 2);
            ind_List = (Ind_Lign-1)*(TaiSys*3) + (Ind_Lign-2) + 1;
            Val1 = (-1)*(dt*gamma);
            REMPLACER Lis1Up ind_List Val1;
            ind_List = ind_List + 1;
            REMPLACER Lis1Up ind_List 1.;
        FINSI;
        SI (&It_2 ega 3);
            ind_List = (Ind_Lign-1)*(TaiSys*3) + (Ind_Lign-3) + 1;
            Val1 = (-1)*(beta*(dt**2));
            REMPLACER Lis1Up ind_List Val1;
            ind_List = ind_List + 2;
            REMPLACER Lis1Up ind_List 1.;
        FINSI;

    FIN It_2;
FIN It_1;


PremInit = MANU 'RIGIDITE' 'TYPE' 'RIGIDITE' MAI1 LISU_ini
'DUAL' LISF_ini 'QUEL' Lis1Init ;


PremMemb = MANU 'RIGIDITE' 'TYPE' 'RIGIDITE' MAI1 LISU_tot
'DUAL' LISF_tot 'QUEL' Lis1Up ;


RESPRO PremInit;
RESPRO PremMemb;

RESPRO P_1;

    New_Fami = TABLE;

REPETER It_1 TaiSys;
    New_Fami.&It_1 = TABLE;
FIN It_1;


REPETER It_T En_Nb_Re;

    Si (&It_T ega 1);
        * Assemblage du second membre
        REPETER It_1 (DIMENSION Cha_proj.F_t);
            Si (&It_1 ega 1);
                SecoMemb = (EXTR (Cha_proj.F_t.&It_1) 1) * (Cha_proj.Ff_init.&It_1);
            SINON;
                SecoMemb = SecoMemb +
                            ((EXTR (Cha_proj.F_t.&It_1) 1) * (Cha_proj.Ff_init.&It_1)) ;
            FINSI;
        FIN It_1;

        Vec_GIni = RESO PremInit SecoMemb;

        REPETER It_1 TaiSys;
            mot1 = EXTR LISU_ini &It_1;
            New_Fami.&It_1.w = PROG (EXTR Vec_GIni mot1 P_1);
            New_Fami.&It_1.v = PROG 0;
            New_Fami.&It_1.u = PROG 0;
        FIN It_1;
    SiNon;
        * Creer fonction pour eviter la repetition de l'assemblage
        REPETER It_1 (DIMENSION Cha_proj.F_t);
            Si (&It_1 ega 1);
                SecoMemb = (EXTR (Cha_proj.F_t.&It_1) &It_T) * (Cha_proj.Ffi.&It_1);
            SINON;
                SecoMemb = SecoMemb +
                            ((EXTR (Cha_proj.F_t.&It_1) &It_T) * (Cha_proj.Ffi.&It_1)) ;
            FINSI;
        FIN It_1;

        Lis_Seco = PROG;

        REPETER It_1 TaiSys;
            g_W_m1 = EXTR New_Fami.&It_1.w (&It_T - 1);
            g_V_m1 = EXTR New_Fami.&It_1.v (&It_T - 1);
            g_U_m1 = EXTR New_Fami.&It_1.u (&It_T - 1);
            pred_V = (g_V_m1 + ((dt*(1-gamma)) * g_W_m1));
            pred_U = (g_U_m1 + (dt*g_V_m1) + ((dt**2)*(0.5-beta)*g_W_m1));
            Lis_Seco = Lis_Seco ET (PROG 0. pred_V pred_U);
                *Mess 'g_W_m1  ' g_W_m1;
                *Mess 'g_V_m1  ' g_V_m1;
                *Mess 'g_U_m1  ' g_U_m1;
                *Mess 'pred_V  ' pred_V;
                *Mess 'pred_U  ' pred_U;

                *REMPLACER SecoMemb (((&It_1 - 1) *3) + 2) pred_V;
                *REMPLACER SecoMemb (((&It_1 - 1) *3) + 3) pred_U;
        FIN It_1;

        *Mess '-------Fin step T----------';

        Seco_2 = MANU 'CHPO' MAI1 LISF_tot Lis_Seco;

        SecoMemb = SecoMemb + Seco_2;
        Vec_G_T = RESO PremMemb SecoMemb;
            *Mess 'PPPPPPPPPPPPPPPPPPP___PPPPPPPPPPPPPPPP';
            *list PremMemb;
            *Mess 'SSSSSSSSSSSSSSSSSSS___SSSSSSSSSSSSSSSS';
            *list SecoMemb;
            *Mess 'RRRRRRRRRRRRRRRRRRR___RRRRRRRRRRRRRRRR';
            *list Vec_G_T;
            *list (EXTR LISU_tot &It_T);


        REPETER It_1 TaiSys;
            mot1 = EXTR LISU_tot (((&It_1 - 1) * 3) + 1);
            New_Fami.&It_1.w = New_Fami.&It_1.w ET (PROG (EXTR Vec_G_T mot1 P_1));
                *Mess '___________________';
                *list mot1;
                *Mess (EXTR Vec_G_T mot1 P_1);
                *Mess (EXTR Vec_G_T U1 P_1);
                *MEss '___________________';

            mot1 = EXTR LISU_tot (((&It_1 - 1) * 3) + 2);
            New_Fami.&It_1.v = New_Fami.&It_1.v ET (PROG (EXTR Vec_G_T mot1 P_1));
            mot1 = EXTR LISU_tot (((&It_1 - 1) * 3) + 3);
            New_Fami.&It_1.u = New_Fami.&It_1.u ET (PROG (EXTR Vec_G_T mot1 P_1));
        FIN It_1;

        *Mess 'ccccc';
    FINSI;
Fin It_T ;

RESPRO New_Fami;

FINPROC;
