AAEZ
PR_ProblemeTemps
DEBPROC PR_ProblemeTemps M C K Ttot schema CHA dt f It_m
FamiF/Table FamiG/Table ;

* Creer un procedure pour le schema
  alpha = 0.;
  beta = 1./4;
  gamma = 1./2;

* Cette partie ne pourra plus etre hors de la boucle en non lineaire
  Prem_g = XTMX f_espa K ;
  Prem_gp = XTMX f_espa C ;
  Prem_gpp = XTMX f_espa M ;

    Fl_Nb_Pa = Ttot/dt + 0.1;
    Fl_Nb_Re = Fl_Nb_Pa + 1.;
    En_Nb_Re = ENTI Fl_Nb_Re ;

    g = PROG ;
    gp = PROG ;
    gpp = PROG ;

    NbCharg = DIMENSION CHA ;
    REPETER It NbCharg ;
      CHA_i = EXTR CHA CHAR &It ;
      CHP = EXTR CHA_i CHAM ;

      LFOR = MOTS FX FY FZ FR FT MX MY MZ MT ;
      L_f = MOTS UX UY UZ UR UT RX RY RZ RT ;
      FOR_proj = XTY CHP f LFOR L_f;

      EVO = EXTR CHA_i EVOL ;

      Si (&It ega 1) ;
        FOR_EVO = EVO*FOR_proj ;
      Sinon ;
        FOR_EVO = FOR_EVO + (EVO * FOR_proj) ;
      FinSi ;
    FIN It ;

* Verifier que l evolution final amene a Ttot avec En_Nb_Re composantes

    F_Hist = EXTR FOR_EVO ORDO ;

    REPETER It En_Nb_Re;

      Si (&It ega 1);
        g_t = 0. ;
        gp_t = 0. ;
        gpp_t = 0. ;
        g_pred = 0. ;
        gp_pred = 0. ;
        F_t = EXTR F_Hist &It;
        Second = F_t;
      SiNon;
        g_pred = g_t + ((1+alpha)*((dt*gp_t) + ((dt**2)*(0.5-beta)*gpp_t)));
        gp_pred = gp_t + ((1+alpha)*dt*(1-gamma)*gpp_t ) ;
        F_t_m = F_t;
        F_t = EXTR F_Hist &It;
        Second = ((1+alpha)*F_t) - (alpha*F_t_m);
      FinSi;

      *Second = F_t;
      * Contribution des modes precendents a faire

      gpp_t_pr = gpp_t;
      gpp_t = (Second - ((Prem_g*g_pred)+(Prem_gp*gp_pred)))/Prem_gpp;

      Si (&It neg 1) ;
        g_t = g_t + (dt*gp_t)
                + ((dt**2)*(0.5-beta)*gpp_t_pr)
                + (beta*(dt**2)*gpp_t) ;
        gp_t = gp_t + (dt*(1-gamma)*gpp_t_pr) + (dt*gamma*gpp_t) ;
      FinSi;

        g =   g   et (PROG g_t  ) ;
        gp =  gp  et (PROG gp_t ) ;
        gpp = gpp et (PROG gpp_t) ;

    Fin It ;

    g_tmps = TABLE;
    g_tmps.u = g;
    g_tmps.v = gp;
    g_tmps.w = gpp;

  RESPRO g_tmps;

FINPROC;
