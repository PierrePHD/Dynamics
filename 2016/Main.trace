LFOR = MOTS FX FY FZ FR FT MX MY MZ MT ;                                
L_f  = MOTS UX UY UZ UR UT RX RY RZ RT ;                                
Pb Cal_T = AANZ;                                                        
DEBPROC AANZ;                                                           
OPTI DIME 3 ELEM SEG2 MODE TRID;                                        
Pb = TABLE;                                                             
Cal_T = TABLE;                                                          
*---------------------DONNEES---------------------*                     
*Unites SI                                                              
AMP1 = -100.0 ;                                                         
LON1 = 0.5 ;                                                            
LON2 = -0.1 ;                                                           
SEC1 = 2.e-4 ;                                                          
IY1 = (8/12.)*1e-8 ;                                                    
IZ1 = (2/12.)*1e-8 ;                                                    
NUP = 0.3 ;                                                             
YOP = 2.1E11 ;                                                          
YOP2 = YOP/((1.25e4)) ;                                                 
RHOP = 7800.0 ;                                                         
*--------------------GEOMETRIE--------------------*                     
P1 = 0.   0. 0. ;                                                       
Pb.P0 = P1 ;                                                            
P2 = LON1 0. 0. ;                                                       
Pb.PS = P2 ;                                                            
L1 = D 20 P1 P2 ;                                                       
P3 = L1 POIN PROC ((LON1/2) 0. 0.);                                     
P4 = LON1 0. LON2 ;                                                     
ELIM L1 0.00000001;                                                     
L2 = D 1 P2 P4;                                                         
Pb.geo = L1 et L2;                                                      
Pb.DirPriv = 'UZ';                                                      
Pb.P_intere = P2;                                                       
*opti trac X ;                                                          
*TRAC Pb.geo ;                                                          
*------DEFINITION DU MODELE ET DU MATERIAU--------*                     
MOD1 = MODEL L1 MECANIQUE ELASTIQUE POUT ;                              
MOD2 = MODEL L2 MECANIQUE ELASTIQUE POUT ;                              
MODTOT = MOD1 et MOD2 ;                                                 
Pb.Mob = MODTOT;                                                        
MAT1 = MATER MOD1 YOUN YOP NU NUP RHO RHOP ;                            
MAT2 = MATER MOD2 YOUN (YOP2/2.) NU NUP RHO (RHOP/100.) ;               
CAR1 = CARAC MOD1 SECT SEC1 INRY IY1 INRZ IZ1                           
TORS 1. VECT (0. 1. 0.) ;                                               
CAR2 = CARAC MOD2 SECT SEC1 INRY IY1 INRZ IZ1                           
TORS 1. VECT (0. 1. 0.) ;                                               
MAT1B = MAT1 ET CAR1 ;                                                  
MAT2B = MAT2 ET CAR2 ;                                                  
MATTOT = MAT1B et MAT2B ;                                               
*-------MATRICES DE RIGIDITE ET DE MASSE----------*                     
Pb.K_i = RIGI MODTOT MATTOT ;                                           
Pb.M_i = MASS MODTOT MATTOT ;                                           
*--------------CONDITIONS LIMITES-----------------*                     
CL1 = BLOQ P1 UY UX RZ UZ RX RY ;                                       
CL2 = BLOQ P4 UY UX RZ UZ RX RY ;                                       
CL0 = BLOQ P4 UY ;                                                      
*CL3 = BLOQ L1 UZ RX RY ;                                               
CL_T = CL1 ET CL2 ;                                                     
Pb.CL_TOT_i= CL_T;                                                      
*--------------Parametres de calcul---------------*                     
Cal_T.dt = 4e-5;                                                        
Cal_T.Ttot = 20e-3;                                                     
Pb.T_period = 10e-3 ;                                                   
En_Nb_Re = AAGZ Cal_T.dt Cal_T.Ttot;                                    
Vec_T = PROG 0. PAS Cal_T.dt Cal_T.Ttot ;                               
*-----------------CHARGEMENT----------------------*                     
*--------- EVOLUTION TEMPORELLE ---------*                              
* Sinus Verse                                                           
LIS_SV = (PROG sinu (1/Pb.T_period) PHAS 270 Vec_T) ;                   
LIS_SV = LIS_SV + (PROG En_Nb_Re*1.);                                   
EVT_SV = EVOL MANU T Vec_T G(T) LIS_SV ;                                
* Constante Unitaire                                                    
EVT_Cst = EVOL MANU T Vec_T G(T) (PROG En_Nb_Re * 1);                   
* Evolution Lineaire                                                    
EVT_Lin = EVOL MANU T Vec_T G(T) (Vec_T*2) ;                            
*-------------- EFFORT ---------------*                                 
* En bout de poutre                                                     
FOR1 = FORCE FZ (AMP1*2.) P2 ;                                          
CHA_SV = CHAR FORC FOR1 EVT_SV ;                                        
* En milieu                                                             
FOR2 = FORCE FX 0. P3 ;                                                 
CHA_Nul = CHAR FORC FOR2 EVT_SV ;                                       
*-------------- GRAVITE --------------*                                 
gz = MANU CHPO L1 1 'UZ' 1. NATURE 'DIFF' TITRE 'Gravite' ;             
fg = EXCO FZ ((Pb.M_i) * gz) FZ;                                        
CHA_g = CHAR FORC fg (EVT_Cst * -9.81) ;                                
Pb.CHA_TOTi = TABLE ;                                                   
*----------------Deplacement Imposes------------------*                 
Dep_I = TABLE;                                                          
Dep_I.1 = TABLE;                                                        
Dep_I.1 .CL  = BLOQ P3 UZ ;                                             
Dep_I.1 .Dep = DEPI (Dep_I.1 .CL) 1.;                                   
Dep_I.1 .TabEvo = TABLE;                                                
Val_1 = 1.5e-3 ;                                                        
LIS_SV_U = (PROG sinu (1/Pb.T_period) PHAS 270 Vec_T) ;                 
LIS_SV_U = (LIS_SV_U + (PROG En_Nb_Re*1.)) * Val_1 ;                    
LIS_SV_V = (PROG sinu (1/Pb.T_period) PHAS (270+90) Vec_T) ;            
LIS_SV_V = (LIS_SV_V * ((1/Pb.T_period) * ( 2*PI ))) * Val_1 ;          
LIS_SV_W = (PROG sinu (1/Pb.T_period) PHAS (270+180) Vec_T) ;           
LIS_SV_W = (LIS_SV_W * ( ((1/Pb.T_period) * ( 2*PI ))**2 )) * Val_1 ;   
EVT_SV_U = EVOL ROUG MANU T Vec_T G(T) LIS_SV_U ;                       
EVT_SV_V = EVOL VERT MANU T Vec_T G(T) LIS_SV_V ;                       
EVT_SV_W = EVOL BLEU MANU T Vec_T G(T) LIS_SV_W ;                       
Dep_I.1 .TabEvo.U= EVT_SV_U;                                            
Dep_I.1 .TabEvo.V= EVT_SV_V;                                            
Dep_I.1 .TabEvo.W= EVT_SV_W;                                            
Pb.D_Imp_i = Dep_I ;                                                    
*------------- Deplacement Initial -------------*                       
FOR1 = FORCE FZ (AMP1*(-5)) P2 ;                                        
* Solution initiallement libre d effort                                 
dep_0 = RESO (Pb.K_i ET Pb.CL_Tot_i) (For1 * 0.);                       
* Solution initiallement sous Effort                                    
dep_1 = RESO (Pb.K_i ET Pb.CL_Tot_i) (For1 );                           
* Solution initiallement sous gravite                                   
dep_g = RESO (Pb.K_i ET Pb.CL_Tot_i) (Fg * -9.81);                      
Pb.U0_i  = dep_0 ;                                                      
Pb.V0_i  = dep_0 ;                                                      
*------------- Non Linearite -------------*                             
Pb.Tab_NL = TABLE;                                                      
RESPRO Pb;                                                              
RESPRO Cal_T;                                                           
FINPROC;                                                                
DEBPROC AAGZ dt Ttot;                                                   
Fl_Nb_Pa = Ttot/dt + 0.1;                                               
Fl_Nb_Re = Fl_Nb_Pa + 1.;                                               
En_Nb_Re = ENTI Fl_Nb_Re ;                                              
RESPRO En_Nb_Re;                                                        
FINPROC;                                                                
K = Pb.K_i;                                                             
M = Pb.M_i;                                                             
C = ((1e-4*K) ET (1e4*M)) * 0.1;                                        
CL_TOT = Pb.CL_TOT_i;                                                   
CHA_TOT = Pb.CHA_TOTi;                                                  
U0 = Pb.U0_i;                                                           
V0 = Pb.V0_i;                                                           
D_Imp = Pb.D_Imp_i ;                                                    
P_intere = Pb.P_intere;                                                 
DirPriv = Pb.DirPriv;                                                   
Nb_NL = DIME (Pb.Tab_NL) ;                                              
Pb.lambda = 0.5;                                                        
dt = Cal_T.dt;                                                          
Ttot = Cal_T.Ttot;                                                      
En_Nb_Re = AAGZ dt Ttot;                                                
Vec_T = PROG 0. PAS dt Ttot ;                                           
schema = 3 ;                                                            
alpha = 0.0;                                                            
beta = 0.25;                                                            
gamma = 0.5;                                                            
DirPt_Fx = VRAI;                                                        
Aff_PtFx = FAUX;                                                        
CL_A = CL_TOT;                                                          
TEMPS ZERO;                                                             
Sol_Dir = AAAZ M C K CL_A CHA_TOT D_Imp                                 
alpha beta gamma dt Ttot U0 V0;                                         
DEBPROC AAAZ M C K CL_A_0 CHA D_Imp alpha beta gamma dt Ttot U0 V0;     
U_t  = U0;                                                              
V_t  = V0;                                                              
W_t  = U0 * 0;                                                          
U_sol = TABLE;                                                          
V_sol = TABLE;                                                          
W_sol = TABLE;                                                          
U_sol.1 = U0;                                                           
V_sol.1 = V0;                                                           
NbCharg = DIMENSION CHA ;                                               
NbDImp  = DIMENSION D_Imp ;                                             
REPETER It_T En_Nb_Re;                                                  
Si (NbCharg > 0) ;                                                      
REPETER It2 NbCharg ;                                                   
CHA_i = EXTR CHA CHAR &It2 ;                                            
CHP_i = EXTR CHA_i CHAM ;                                               
EVO_i = EXTR CHA_i EVOL ;                                               
CHA_ord = EXTR EVO_i ORDO;                                              
Val = EXTR CHA_ord &It_T;                                               
Si (&It_T neg 1);                                                       
Val_t_m = EXTR CHA_ord (&It_T-1);                                       
Val = ((1+alpha)*Val) - (alpha*Val_t_m) ;                               
FinSi ;                                                                 
Si (&It2 ega 1) ;                                                       
FOR_Imp = CHP_i * Val ;                                                 
SiNon ;                                                                 
FOR_Imp = FOR_Imp + (CHP_i * Val) ;                                     
FinSi ;                                                                 
FIN It2 ;                                                               
SiNon ;                                                                 
FOR_Imp = U0 * 0;                                                       
FinSi ;                                                                 
Si (NbDImp > 0) ;                                                       
REPETER It2 NbDImp ;                                                    
CHP_i    = D_Imp.&It2 .Dep ;                                            
CL_i     = D_Imp.&It2 .CL ;                                             
Evo_W_i  = D_Imp.&It2 .TabEvo.W ;                                       
lis_dep = EXTR Evo_W_i ORDO;                                            
Val_dep = EXTR lis_dep &It_T;                                           
Si ((&It2 ega 1) et (NbCharg EGA 0)) ;                                  
FOR_Imp = CHP_i * Val_dep ;                                             
SiNon ;                                                                 
FOR_Imp = FOR_Imp + (CHP_i * Val_dep) ;                                 
FinSi ;                                                                 
Si (&It2 ega 1) ;                                                       
CL_A = CL_A_0 et (CL_i);                                                
SiNon ;                                                                 
CL_A = CL_A   et (CL_i);                                                
FinSi ;                                                                 
FIN It2 ;                                                               
SiNon ;                                                                 
FinSi ;                                                                 
W_t V_t U_t= _RESO_T M C K CL_A FOR_Imp alpha beta gamma dt U_t V_t W_t;
Si (NbDImp > 0) ;                                                       
REPETER It_0 NbDImp ;                                                   
CL_i     = D_Imp.&It_0 .CL ;                                            
Evo_U_i  = D_Imp.&It_0 .TabEvo.U ;                                      
Evo_V_i  = D_Imp.&It_0 .TabEvo.V ;                                      
CHP_01 = MASQUE (ENLE (EXTR CL_i 'DIAG') 'LX' ) 'EGALE' 0. ;            
Pro_U = AATZ CHP_01 U_t ;                                               
Pro_V = AATZ CHP_01 V_t ;                                               
lis_depU = EXTR Evo_U_i ORDO;                                           
Val_depU = EXTR lis_depU &It_T;                                         
lis_depV = EXTR Evo_V_i ORDO;                                           
Val_depV = EXTR lis_depV &It_T;                                         
U_t = (U_t - (Pro_U * CHP_01)) + (Val_depU * CHP_01) ;                  
V_t = (V_t - (Pro_V * CHP_01)) + (Val_depU * CHP_01) ;                  
Fin It_0 ;                                                              
FinSi ;                                                                 
Si (&It_T > 1);                                                         
U_sol.&It_T = U_t;                                                      
V_sol.&It_T = V_t;                                                      
FinSi ;                                                                 
W_sol.&It_T = W_t;                                                      
FIN It_T;                                                               
Solution = TABLE;                                                       
Solution.U = U_sol;                                                     
Solution.V = V_sol;                                                     
Solution.W = W_sol;                                                     
RESPRO Solution ;                                                       
FINPROC;                                                                
DEBPROC _RESO_T M C K CL_A F alpha beta gamma dt U_tm1 V_tm1 A_tm1;     
Vp = V_tm1 + ((( 1+alpha )*dt*(1-gamma))*A_tm1);                        
Up = U_tm1 + (  ( 1+alpha ) * ( (dt*V_tm1)                              
+ ( ( (dt**2) * (0.5-beta) )  * A_tm1 )                                 
)                                                                       
);                                                                      
S = M ET (                                                              
( 1. + alpha ) *                                                        
( (C*(gamma*dt)) ET (K*(beta*(dt**2))) )                                
);                                                                      
S = S ET CL_A;                                                          
* Non Lineaire                                                          
Si ( Nb_NL > 0) ;                                                       
A_t V_t U_t = ABPZ F 10 'Dir' DirPt_Fx ;                                
SiNon ;                                                                 
A_t V_t U_t = ABIZ F ;                                                  
FinSi ;                                                                 
RESPRO A_t ;                                                            
RESPRO V_t;                                                             
RESPRO U_t;                                                             
FINPROC;                                                                
DEBPROC ABIZ For_HHT*CHPOINT;                                           
A_HHT_t = RESO S ( For_HHT - (C*Vp) - (K*Up) );                         
V_HHT_t =   V_tm1                                                       
+ ((dt*(1-gamma))*A_tm1)                                                
+ ((dt*gamma)*A_HHT_t);                                                 
U_HHT_t = U_tm1 + (dt*V_tm1)                                            
+ ((dt**2)*( ((0.5-beta)*A_tm1) + (beta*A_HHT_t) ));                    
RESPRO A_HHT_t ;                                                        
RESPRO V_HHT_t ;                                                        
RESPRO U_HHT_t ;                                                        
FINPROC;                                                                
DEBPROC AATZ f1_espa f2_espa Mat_1/RIGIDITE;                            
Si (EXISTE Mat_1) ;                                                     
* X.K.Y (YTMX  X Y M)                                                   
Pro_Sca = YTMX f1_espa f2_espa Mat_1;                                   
SiNon ;                                                                 
* Norme L2                                                              
Pro_Sca = XTY f1_espa f2_espa L_f L_f;                                  
FinSi ;                                                                 
RESPRO Pro_Sca ;                                                        
FINPROC;                                                                
TEMPS;                                                                  
opti donn 5 ;                                                           
opti donn 3 ;                                                           
FamiF = TABLE ;                                                         
FamiF.Cal = TABLE;                                                      
FamiF.Imp = TABLE;                                                      
FamiF.Ini = TABLE;                                                      
AffMods = LECT ;                                                        
AffSolu = LECT ;                                                        
P3 = (PB.geo) POIN PROC ((0.5/2) 0. 0.);                                
AAKZ AffMods AffSolu P_intere DirPriv 'U';                              
DEBPROC AAKZ AffMods*ListEnti AffSolu*ListEnti Pt_Aff*Point             
Coord Gr_ndeur*MOT;                                                     
NbMod = DIMENSION FamiF.Cal                                             
+ (DIME FamiF.Ini)                                                      
+ (DIME FamiF.Imp);                                                     
NbMax = MAXI (AffMods et AffSolu);                                      
Si (NbMax > NbMod);                                                     
Mess 'Il n y a que ' NbMod ' modes' ;                                   
opti donn 5;                                                            
FinSi ;                                                                 
NbModCal = (NbMax - (DIME FamiF.Ini)) - (DIME FamiF.Imp);               
FamiFTot FamiGTot = AAUZ NbModCal ;                                     
Lis_dir = PROG;                                                         
REPE It_T En_Nb_Re;                                                     
Lis_dir = Lis_dir ET                                                    
(PROG (EXTR (Sol_Dir.Gr_ndeur.&It_T) Coord Pt_Aff));                    
FIN It_T;                                                               
Evol_dir = EVOL MANU Vec_T Lis_dir ;                                    
* Sortie Fichier                                                        
*opti sort (chain 'Direct' ) ;                                          
*sort exce (Evol_dir) sepa VIRG;                                        
Sol_k = TABLE;                                                          
Mod_k = TABLE;                                                          
Si (NbMax > 0);                                                         
REPETER It2 NbMax;                                                      
Val = EXTR FamiFTot.&It2 Coord Pt_Aff;                                  
Sol_PGD = Val * FamiGTot.&It2.Gr_ndeur ;                                
Mod_k.&It2 = Sol_PGD;                                                   
Si (&It2 > 1);                                                          
It_prec = &It2 - 1;                                                     
Sol_k.&It2 = Sol_k.It_prec + Mod_k.&It2 ;                               
SiNon ;                                                                 
Sol_k.&It2 = Sol_PGD;                                                   
FinSi ;                                                                 
FIN It2;                                                                
SiNon;                                                                  
Dess (Evol_dir et (D_Imp.1 .TabEvo.Gr_ndeur) );                         
Si (Nb_NL ega 1) ;                                                      
Si ( Pt_Aff ega (Pb.Tab_NL.1 .Poi_int) ) ;                              
Si (EGA Coord (Pb.Tab_NL.1 .Dir_int) );                                 
Var_NL = (Pb.Tab_NL.1 .fac_int) * Lis_dir ;                             
Eff_NL = ABCZ (Pb.Tab_NL.1) Var_NL ;                                    
Evo_Eff = EVOL Roug MANU Vec_T Eff_NL ;                                 
* Sortie Fichier                                                        
*opti sort (chain 'EffortNonLinDir' ) ;                                 
*sort exce (Evo_Eff) sepa VIRG;                                         
DESS Evo_Eff ;                                                          
FinSi ;                                                                 
FinSi ;                                                                 
FinSi ;                                                                 
FinSi;                                                                  
Evo_k = TABLE;                                                          
LMot = MOTS 'ROUG' 'BLEU' 'VERT' 'JAUN' 'VIOL' 'TURQ';                  
* Affichage des Solutions                                               
Si ( (DIMENSION AffSolu) > 0);                                          
REPETER It (MINI ((DIMENSION AffSolu) et 6));                           
col = EXTR LMot &It;                                                    
num = (EXTR AffSolu &It);                                               
Evo_k.&It = EVOL col MANU Vec_T Sol_k.num;                              
Si (&It ega 1) ;                                                        
Tot = Evol_dir et Evo_k.&It;                                            
SiNon ;                                                                 
Tot = Tot et Evo_k.&It;                                                 
FinSi ;                                                                 
* Sortie Fichier                                                        
*opti sort (chain 'SoluPGD' &It ) ;                                     
*sort exce (Evo_k.&It) sepa VIRG;                                       
Fin It;                                                                 
DESS Tot ;                                                              
FinSi ;                                                                 
* Affichage des modes                                                   
Si ( (DIMENSION AffMods) > 0);                                          
REPETER It (MINI ((DIMENSION AffMods) et 6));                           
col = EXTR LMot &It;                                                    
num = EXTR AffMods &It;                                                 
Evo_k.&It = EVOL col MANU Vec_T Mod_k.num ;                             
Si (&It ega 1) ;                                                        
Tot = Evol_dir et Evo_k.&It;                                            
SiNon ;                                                                 
Tot = Tot et Evo_k.&It;                                                 
FinSi ;                                                                 
* Sortie Fichier                                                        
*opti sort (chain 'ModePGD' &It ) ;                                     
*sort exce (Evo_k.&It) sepa VIRG;                                       
Fin It;                                                                 
DESS Tot ;                                                              
*XBOR 0. 1e-2 YBOR -4e-3 1e-3;                                          
FinSi ;                                                                 
Si (NbMax > 0) ;                                                        
Si (Nb_NL ega 1) ;                                                      
Si ( Pt_Aff ega (Pb.Tab_NL.1 .Poi_int) ) ;                              
Si (EGA Coord (Pb.Tab_NL.1 .Dir_int) );                                 
Var_NL = (Pb.Tab_NL.1 .fac_int) * Sol_k.NbMax ;                         
Eff_NL = ABCZ (Pb.Tab_NL.1) Var_NL ;                                    
Evo_Eff = EVOL Roug MANU Vec_T Eff_NL ;                                 
* Sortie Fichier                                                        
*opti sort (chain 'EffortNonLinPGD' ) ;                                 
*sort exce (Evo_Eff) sepa VIRG;                                         
DESS Evo_Eff ;                                                          
FinSi ;                                                                 
FinSi ;                                                                 
FinSi ;                                                                 
FinSi ;                                                                 
FINPROC;                                                                
DEBPROC AAUZ NbMod*Entier;                                              
LisMotFa = MOTS 'IMP' 'INI' 'CAL';                                      
NumeCoup = 0;                                                           
FamiFTot = TABLE;                                                       
FamiGTot = TABLE;                                                       
REPETER Catego (DIME LisMotFa);                                         
Categori = EXTR LisMotFa &Catego;                                       
NbModCat =(DIME FamiF.Categori);                                        
Si (NbModCat > 0);                                                      
Si (neg Categori 'CAL');                                                
REPETER ItCoupl NbModCat;                                               
NumeCoup = NumeCoup + 1;                                                
FamiFTot.NumeCoup = FamiF.Categori.&ItCoupl;                            
FamiGTot.NumeCoup = FamiG.Categori.&ItCoupl;                            
FIN ItCoupl;                                                            
SiNon ;                                                                 
Si (NbMod > 0);                                                         
Si (NbMod > NbModCat);                                                  
Mess 'Il n y a que ' NbModCat ' modes, pas ' NbMod;                     
list FamiF.Categori.NbMod;                                              
FinSi ;                                                                 
REPETER ItCoupl NbMod;                                                  
NumeCoup = NumeCoup + 1;                                                
FamiFTot.NumeCoup = FamiF.Categori.&ItCoupl;                            
FamiGTot.NumeCoup = FamiG.Categori.&ItCoupl;                            
FIN ItCoupl;                                                            
FinSi ;                                                                 
FinSi ;                                                                 
FinSi ;                                                                 
FIN Catego;                                                             
RESPRO FamiFTot;                                                        
RESPRO FamiGTot;                                                        
FINPROC;                                                                
