LFOR = MOTS FX FY FZ FR FT MX MY MZ MT Q;                               
L_f  = MOTS UX UY UZ UR UT RX RY RZ RT T;                               
Pb Cal_T = AANZ;                                                        
DEBPROC AANZ;                                                           
OPTI DIME 3 ELEM SEG2 MODE TRID;                                        
Pb = TABLE;                                                             
Cal_T = TABLE;                                                          
*---------------------DONNEES---------------------*                     
*Unites SI                                                              
AMP1 = -100.0 ;                                                         
LON1 = 0.5 ;                                                            
LON2 = -0.1 ;                                                           
SEC1 = 2.e-4 ;                                                          
IY1 = (8/12.)*1e-8 ;                                                    
IZ1 = (2/12.)*1e-8 ;                                                    
NUP = 0.3 ;                                                             
YOP = 2.1E11 ;                                                          
YOP2 = YOP/((1.25e4)) ;                                                 
RHOP = 7800.0 ;                                                         
*--------------------GEOMETRIE--------------------*                     
P1 = 0.   0. 0. ;                                                       
Pb.P0 = P1 ;                                                            
P2 = LON1 0. 0. ;                                                       
Pb.PS = P2 ;                                                            
L1 = D 20 P1 P2 ;                                                       
P3 = L1 POIN PROC ((LON1/2) 0. 0.);                                     
P4 = LON1 0. LON2 ;                                                     
ELIM L1 0.00000001;                                                     
L2 = D 1 P2 P4;                                                         
Pb.geo = L1 et L2;                                                      
Pb.DirPriv = 'UZ';                                                      
Pb.P_intere = P2;                                                       
*opti trac X ;                                                          
*TRAC Pb.geo ;                                                          
*------DEFINITION DU MODELE ET DU MATERIAU--------*                     
MOD1 = MODEL L1 MECANIQUE ELASTIQUE POUT ;                              
MOD2 = MODEL L2 MECANIQUE ELASTIQUE POUT ;                              
MODTOT = MOD1 et MOD2 ;                                                 
Pb.Mob = MODTOT;                                                        
MAT1 = MATER MOD1 YOUN YOP NU NUP RHO RHOP ;                            
MAT2 = MATER MOD2 YOUN (YOP2/2.) NU NUP RHO (RHOP/100.) ;               
CAR1 = CARAC MOD1 SECT SEC1 INRY IY1 INRZ IZ1                           
TORS 1. VECT (0. 1. 0.) ;                                               
CAR2 = CARAC MOD2 SECT SEC1 INRY IY1 INRZ IZ1                           
TORS 1. VECT (0. 1. 0.) ;                                               
MAT1B = MAT1 ET CAR1 ;                                                  
MAT2B = MAT2 ET CAR2 ;                                                  
MATTOT = MAT1B et MAT2B ;                                               
*-------MATRICES DE RIGIDITE ET DE MASSE----------*                     
Pb.K_i = RIGI MODTOT MATTOT ;                                           
Pb.M_i = MASS MODTOT MATTOT ;                                           
*--------------CONDITIONS LIMITES-----------------*                     
CL1 = BLOQ P1 UY UX RZ UZ RX RY ;                                       
CL2 = BLOQ P4 UY UX RZ UZ RX RY ;                                       
CL0 = BLOQ P4 UY ;                                                      
*CL3 = BLOQ L1 UZ RX RY ;                                               
CL_T = CL1 ET CL2 ;                                                     
Pb.CL_TOT_i= CL_T;                                                      
*--------------Parametres de calcul---------------*                     
Cal_T.dt = 4e-5;                                                        
Cal_T.Ttot = 20e-3;                                                     
Pb.T_period = 10e-3 ;                                                   
En_Nb_Re = AAGZ Cal_T.dt Cal_T.Ttot;                                    
Vec_T = PROG 0. PAS Cal_T.dt Cal_T.Ttot ;                               
*-----------------CHARGEMENT----------------------*                     
*--------- EVOLUTION TEMPORELLE ---------*                              
* Sinus Verse                                                           
LIS_SV = (PROG sinu (1/Pb.T_period) PHAS 270 Vec_T) ;                   
LIS_SV = LIS_SV + (PROG En_Nb_Re*1.);                                   
EVT_SV = EVOL MANU T Vec_T G(T) LIS_SV ;                                
* Constante Unitaire                                                    
EVT_Cst = EVOL MANU T Vec_T G(T) (PROG En_Nb_Re * 1);                   
* Evolution Lineaire                                                    
EVT_Lin = EVOL MANU T Vec_T G(T) (Vec_T*2) ;                            
*-------------- EFFORT ---------------*                                 
* En bout de poutre                                                     
FOR1 = FORCE FZ (AMP1*2.) P2 ;                                          
CHA_SV = CHAR FORC FOR1 EVT_SV ;                                        
* En milieu                                                             
FOR2 = FORCE FX 0. P3 ;                                                 
CHA_Nul = CHAR FORC FOR2 EVT_SV ;                                       
*-------------- GRAVITE --------------*                                 
gz = MANU CHPO L1 1 'UZ' 1. NATURE 'DIFF' TITRE 'Gravite' ;             
fg = EXCO FZ ((Pb.M_i) * gz) FZ;                                        
CHA_g = CHAR FORC fg (EVT_Cst * -9.81) ;                                
Pb.CHA_TOTi = TABLE ;                                                   
*----------------Deplacement Imposes------------------*                 
Dep_I = TABLE;                                                          
Dep_I.1 = TABLE;                                                        
Dep_I.1 .CL  = BLOQ P3 UZ ;                                             
Dep_I.1 .Dep = DEPI (Dep_I.1 .CL) 1.;                                   
Dep_I.1 .TabEvo = TABLE;                                                
Val_1 = 1.5e-3 ;                                                        
LIS_SV_U = (PROG sinu (1/Pb.T_period) PHAS 270 Vec_T) ;                 
LIS_SV_U = (LIS_SV_U + (PROG En_Nb_Re*1.)) * Val_1 ;                    
LIS_SV_V = (PROG sinu (1/Pb.T_period) PHAS (270+90) Vec_T) ;            
LIS_SV_V = (LIS_SV_V * ((1/Pb.T_period) * ( 2*PI ))) * Val_1 ;          
LIS_SV_W = (PROG sinu (1/Pb.T_period) PHAS (270+180) Vec_T) ;           
LIS_SV_W = (LIS_SV_W * ( ((1/Pb.T_period) * ( 2*PI ))**2 )) * Val_1 ;   
EVT_SV_U = EVOL ROUG MANU T Vec_T G(T) LIS_SV_U ;                       
EVT_SV_V = EVOL VERT MANU T Vec_T G(T) LIS_SV_V ;                       
EVT_SV_W = EVOL BLEU MANU T Vec_T G(T) LIS_SV_W ;                       
Dep_I.1 .TabEvo.U= EVT_SV_U;                                            
Dep_I.1 .TabEvo.V= EVT_SV_V;                                            
Dep_I.1 .TabEvo.W= EVT_SV_W;                                            
Pb.D_Imp_i = Dep_I ;                                                    
*------------- Deplacement Initial -------------*                       
FOR1 = FORCE FZ (AMP1*(-5)) P2 ;                                        
* Solution initiallement libre d effort                                 
dep_0 = RESO (Pb.K_i ET Pb.CL_Tot_i) (For1 * 0.);                       
* Solution initiallement sous Effort                                    
dep_1 = RESO (Pb.K_i ET Pb.CL_Tot_i) (For1 );                           
* Solution initiallement sous gravite                                   
dep_g = RESO (Pb.K_i ET Pb.CL_Tot_i) (Fg * -9.81);                      
Pb.U0_i  = dep_0 ;                                                      
Pb.V0_i  = dep_0 ;                                                      
*------------- Non Linearite -------------*                             
Pb.Tab_NL = TABLE;                                                      
RESPRO Pb;                                                              
RESPRO Cal_T;                                                           
FINPROC;                                                                
DEBPROC AAGZ dt Ttot;                                                   
Fl_Nb_Pa = Ttot/dt + 0.1;                                               
Fl_Nb_Re = Fl_Nb_Pa + 1.;                                               
En_Nb_Re = ENTI Fl_Nb_Re ;                                              
RESPRO En_Nb_Re;                                                        
FINPROC;                                                                
K = Pb.K_i;                                                             
M = Pb.M_i;                                                             
C = ((1e-4*K) ET (1e4*M)) * 0.1;                                        
CL_TOT = Pb.CL_TOT_i;                                                   
CHA_TOT = Pb.CHA_TOTi;                                                  
U0 = Pb.U0_i;                                                           
V0 = Pb.V0_i;                                                           
D_Imp = Pb.D_Imp_i ;                                                    
P_intere = Pb.P_intere;                                                 
DirPriv = Pb.DirPriv;                                                   
Nb_NL = DIME (Pb.Tab_NL) ;                                              
Pb.lambda = 0.5;                                                        
dt = Cal_T.dt;                                                          
Ttot = Cal_T.Ttot;                                                      
En_Nb_Re = AAGZ dt Ttot;                                                
Vec_T = PROG 0. PAS dt Ttot ;                                           
schema = 3 ;                                                            
alpha = 0.0;                                                            
beta = 0.25;                                                            
gamma = 0.5;                                                            
DirPt_Fx = VRAI;                                                        
Aff_PtFx = FAUX;                                                        
CL_A = CL_TOT;                                                          
TEMPS ZERO;                                                             
Sol_Dir = AAAZ M C K CL_A CHA_TOT D_Imp                                 
alpha beta gamma dt Ttot U0 V0;                                         
DEBPROC AAAZ M C K CL_A_0 CHA D_Imp alpha beta gamma dt Ttot U0 V0;     
U_t  = U0;                                                              
V_t  = V0;                                                              
W_t  = U0 * 0;                                                          
U_sol = TABLE;                                                          
V_sol = TABLE;                                                          
W_sol = TABLE;                                                          
U_sol.1 = U0;                                                           
V_sol.1 = V0;                                                           
NbCharg = DIMENSION CHA ;                                               
NbDImp  = DIMENSION D_Imp ;                                             
REPETER It_T En_Nb_Re;                                                  
Si (NbCharg > 0) ;                                                      
REPETER It2 NbCharg ;                                                   
CHA_i = EXTR CHA CHAR &It2 ;                                            
CHP_i = EXTR CHA_i CHAM ;                                               
EVO_i = EXTR CHA_i EVOL ;                                               
CHA_ord = EXTR EVO_i ORDO;                                              
Val = EXTR CHA_ord &It_T;                                               
Si (&It_T neg 1);                                                       
Val_t_m = EXTR CHA_ord (&It_T-1);                                       
Val = ((1+alpha)*Val) - (alpha*Val_t_m) ;                               
FinSi ;                                                                 
Si (&It2 ega 1) ;                                                       
FOR_Imp = CHP_i * Val ;                                                 
SiNon ;                                                                 
FOR_Imp = FOR_Imp + (CHP_i * Val) ;                                     
FinSi ;                                                                 
FIN It2 ;                                                               
SiNon ;                                                                 
FOR_Imp = U0 * 0;                                                       
FinSi ;                                                                 
Si (NbDImp > 0) ;                                                       
REPETER It2 NbDImp ;                                                    
CHP_i    = D_Imp.&It2 .Dep ;                                            
CL_i     = D_Imp.&It2 .CL ;                                             
Evo_W_i  = D_Imp.&It2 .TabEvo.W ;                                       
lis_dep = EXTR Evo_W_i ORDO;                                            
Val_dep = EXTR lis_dep &It_T;                                           
Si ((&It2 ega 1) et (NbCharg EGA 0)) ;                                  
FOR_Imp = CHP_i * Val_dep ;                                             
SiNon ;                                                                 
FOR_Imp = FOR_Imp + (CHP_i * Val_dep) ;                                 
FinSi ;                                                                 
Si (&It2 ega 1) ;                                                       
CL_A = CL_A_0 et (CL_i);                                                
SiNon ;                                                                 
CL_A = CL_A   et (CL_i);                                                
FinSi ;                                                                 
FIN It2 ;                                                               
SiNon ;                                                                 
CL_A = CL_A_0;                                                          
FinSi ;                                                                 
W_t V_t U_t= _RESO_T M C K CL_A FOR_Imp alpha beta gamma dt U_t V_t W_t;
Si (NbDImp > 0) ;                                                       
REPETER It_0 NbDImp ;                                                   
CL_i     = D_Imp.&It_0 .CL ;                                            
Evo_U_i  = D_Imp.&It_0 .TabEvo.U ;                                      
Evo_V_i  = D_Imp.&It_0 .TabEvo.V ;                                      
CHP_01 = MASQUE (EXCO (EXTR CL_i 'DIAG') 'LX' 'LX') 'EGALE' 0. ;        
CHP_02 = (CL_i * CHP_01)  ;                                             
CHP_03 = CHAN 'COMP' CHP_02 LFOR L_f ;                                  
Nor_f = (AASZ CHP_03) ;                                                 
CHP_03 = CHP_03 / Nor_f ;                                               
Pro_U = (AATZ CHP_03 U_t)  ;                                            
Pro_V = (AATZ CHP_03 V_t)  ;                                            
lis_depU = EXTR Evo_U_i ORDO;                                           
Val_depU = (EXTR lis_depU &It_T) / Nor_f;                               
lis_depV = EXTR Evo_V_i ORDO;                                           
Val_depV = (EXTR lis_depV &It_T) / Nor_f;                               
U_t = (U_t + ((Val_depU - Pro_U) * CHP_03)) ;                           
V_t = (V_t + ((Val_depV - Pro_V) * CHP_03)) ;                           
Fin It_0 ;                                                              
FinSi ;                                                                 
Si (&It_T > 1);                                                         
U_sol.&It_T = U_t;                                                      
V_sol.&It_T = V_t;                                                      
FinSi ;                                                                 
W_sol.&It_T = W_t;                                                      
FIN It_T;                                                               
Solution = TABLE;                                                       
Solution.U = U_sol;                                                     
Solution.V = V_sol;                                                     
Solution.W = W_sol;                                                     
RESPRO Solution ;                                                       
FINPROC;                                                                
DEBPROC _RESO_T M C K CL_A F alpha beta gamma dt U_tm1 V_tm1 W_tm1;     
Vp = V_tm1 + ((( 1+alpha )*dt*(1-gamma))*W_tm1);                        
Up = U_tm1 + (  ( 1+alpha ) * ( (dt*V_tm1)                              
+ ( ( (dt**2) * (0.5-beta) )  * W_tm1 )                                 
)                                                                       
);                                                                      
S = M ET (                                                              
( 1. + alpha ) *                                                        
( (C*(gamma*dt)) ET (K*(beta*(dt**2))) )                                
);                                                                      
S = S ET CL_A;                                                          
* Non Lineaire                                                          
Si ( Nb_NL > 0) ;                                                       
W_t V_t U_t = ABPZ F 10 'Dir' DirPt_Fx ;                                
SiNon ;                                                                 
W_t V_t U_t = ABIZ F ;                                                  
FinSi ;                                                                 
RESPRO W_t ;                                                            
RESPRO V_t;                                                             
RESPRO U_t;                                                             
FINPROC;                                                                
DEBPROC ABIZ For_HHT*CHPOINT;                                           
W_HHT_t = RESO S ( For_HHT - (C*Vp) - (K*Up) );                         
V_HHT_t =   V_tm1                                                       
+ ((dt*(1-gamma))*W_tm1)                                                
+ ((dt*gamma)*W_HHT_t);                                                 
U_HHT_t = U_tm1 + (dt*V_tm1)                                            
+ ((dt**2)*( ((0.5-beta)*W_tm1) + (beta*W_HHT_t) ));                    
RESPRO W_HHT_t ;                                                        
RESPRO V_HHT_t ;                                                        
RESPRO U_HHT_t ;                                                        
FINPROC;                                                                
DEBPROC AASZ f_espa Mat_0/RIGIDITE;                                     
Si (EXISTE Mat_0) ;                                                     
* X.K.Y (YTMX  X Y M)                                                   
Nor_Esp = (AATZ f_espa f_espa Mat_0)**0.5;                              
SiNon ;                                                                 
* Norme L2                                                              
Nor_Esp = (AATZ f_espa f_espa)**0.5;                                    
FinSi ;                                                                 
RESPRO Nor_Esp;                                                         
FINPROC;                                                                
DEBPROC AATZ f1_espa f2_espa Mat_1/RIGIDITE;                            
Si (EXISTE Mat_1) ;                                                     
* X.K.Y (YTMX  X Y M)                                                   
Pro_Sca = YTMX f1_espa f2_espa Mat_1;                                   
SiNon ;                                                                 
* Norme L2                                                              
Pro_Sca = XTY f1_espa f2_espa L_f L_f;                                  
FinSi ;                                                                 
RESPRO Pro_Sca ;                                                        
FINPROC;                                                                
TEMPS;                                                                  
P3 = (PB.geo) POIN PROC ((0.5/2) 0. 0.);                                
AAKZ Directe P3 DirPriv 'U';                                            
DEBPROC AAKZ Res*MOT AffMods/ListEnti AffSolu/ListEnti Pt_Aff*Point     
Coord Gr_ndeur*MOT;                                                     
NbMod = 0 ;                                                             
Si (EGA Res 'PGD') ;                                                    
NbMod = DIMENSION FamiF.Cal                                             
+ (DIME FamiF.Ini)                                                      
+ (DIME FamiF.Imp);                                                     
FinSi ;                                                                 
Si (EGA Res 'POD') ;                                                    
NbMod = DIME Tab_Mod;                                                   
FinSi ;                                                                 
Si (OU (EGA Res 'POD') (EGA Res 'PGD')) ;                               
NbMax = MAXI (AffMods et AffSolu) ;                                     
Si (NbMax > NbMod);                                                     
Mess 'Il n y a que ' NbMod ' modes' ;                                   
opti donn 5;                                                            
FinSi ;                                                                 
SiNon ;                                                                 
NbMax = 0 ;                                                             
FinSi ;                                                                 
Si (EGA Res 'PGD') ;                                                    
NbModCal = (NbMax - (DIME FamiF.Ini)) - (DIME FamiF.Imp);               
FamiFTot FamiGTot = AAUZ NbModCal ;                                     
FinSi ;                                                                 
Si (EGA Res 'POD') ;                                                    
FamPOD_T = ABXZ Sol_POD ;                                               
FinSi ;                                                                 
Lis_dir = PROG;                                                         
REPE It_T En_Nb_Re;                                                     
Lis_dir = Lis_dir ET                                                    
(PROG (EXTR (Sol_Dir.Gr_ndeur.&It_T) Coord Pt_Aff));                    
FIN It_T;                                                               
Evol_dir = EVOL MANU Vec_T Lis_dir ;                                    
Si (NbMax > 0);                                                         
Sol_k = TABLE;                                                          
Mod_k = TABLE;                                                          
REPETER It2 NbMax;                                                      
Si (EGA Res 'PGD') ;                                                    
Val = EXTR FamiFTot.&It2 Coord Pt_Aff;                                  
Sol_red = Val * FamiGTot.&It2.Gr_ndeur ;                                
FinSi ;                                                                 
Si (EGA Res 'POD') ;                                                    
Val = EXTR Tab_Mod.&It2 Coord Pt_Aff;                                   
Sol_red = Val * FamPOD_T.&It2.Gr_ndeur ;                                
FinSi ;                                                                 
Mod_k.&It2 = Sol_red;                                                   
Si (&It2 > 1);                                                          
It_prec = &It2 - 1;                                                     
Sol_k.&It2 = Sol_k.It_prec + Mod_k.&It2 ;                               
SiNon ;                                                                 
Sol_k.&It2 = Sol_red;                                                   
FinSi ;                                                                 
FIN It2;                                                                
SiNon;                                                                  
Dess (Evol_dir);                                                        
Si (Nb_NL ega 1) ;                                                      
Si ( Pt_Aff ega (Pb.Tab_NL.1 .Poi_int) ) ;                              
Si (EGA Coord (Pb.Tab_NL.1 .Dir_int) );                                 
Var_NL = (Pb.Tab_NL.1 .fac_int) * Lis_dir ;                             
Eff_NL = ABCZ (Pb.Tab_NL.1) Var_NL ;                                    
Evo_Eff = EVOL Roug MANU Vec_T Eff_NL ;                                 
DESS Evo_Eff ;                                                          
FinSi ;                                                                 
FinSi ;                                                                 
FinSi ;                                                                 
FinSi;                                                                  
Evo_k = TABLE;                                                          
LMot = MOTS 'ROUG' 'BLEU' 'VERT' 'JAUN' 'VIOL' 'TURQ';                  
Si (NbMax > 0);                                                         
Si ( (DIMENSION AffSolu) > 0);                                          
REPETER It (MINI ((DIMENSION AffSolu) et 6));                           
col = EXTR LMot &It;                                                    
num = (EXTR AffSolu &It);                                               
Evo_k.&It = EVOL col MANU Vec_T Sol_k.num;                              
Si (&It ega 1) ;                                                        
Tot = Evol_dir et Evo_k.&It;                                            
SiNon ;                                                                 
Tot = Tot et Evo_k.&It;                                                 
FinSi ;                                                                 
Fin It;                                                                 
DESS Tot ;                                                              
FinSi ;                                                                 
FinSi ;                                                                 
Si (NbMax > 0);                                                         
Si ( (DIMENSION AffMods) > 0);                                          
REPETER It (MINI ((DIMENSION AffMods) et 6));                           
col = EXTR LMot &It;                                                    
num = EXTR AffMods &It;                                                 
Evo_k.&It = EVOL col MANU Vec_T Mod_k.num ;                             
Si (&It ega 1) ;                                                        
Tot = Evol_dir et Evo_k.&It;                                            
SiNon ;                                                                 
Tot = Tot et Evo_k.&It;                                                 
FinSi ;                                                                 
Fin It;                                                                 
DESS Tot ;                                                              
*XBOR 0. 1e-2 YBOR -4e-3 1e-3;                                          
FinSi ;                                                                 
FinSI ;                                                                 
Si (NbMax > 0) ;                                                        
Si (Nb_NL ega 1) ;                                                      
Si ( Pt_Aff ega (Pb.Tab_NL.1 .Poi_int) ) ;                              
Si (EGA Coord (Pb.Tab_NL.1 .Dir_int) );                                 
Var_NL = (Pb.Tab_NL.1 .fac_int) * Sol_k.NbMax ;                         
Eff_NL = ABCZ (Pb.Tab_NL.1) Var_NL ;                                    
Evo_Eff = EVOL Roug MANU Vec_T Eff_NL ;                                 
DESS Evo_Eff ;                                                          
FinSi ;                                                                 
FinSi ;                                                                 
FinSi ;                                                                 
FinSi ;                                                                 
FINPROC;                                                                
NbModPOD = 2 ;                                                          
Lis_ValS Tab_Mod = ABSZ NbModPOD;                                       
DEBPROC ABSZ NbModPOD*ENTIER;                                           
Pb.Gpoin = CHAN POI1 (Pb.geo) ;                                         
Nb_Noeu = NBNO (Pb.geo) ;                                               
L_Comp = EXTR (ENLE (Sol_Dir.U.1) 'LX' ) 'COMP' ;                       
Nb_Comp = DIME L_Comp ;                                                 
L_Out = PROG;                                                           
REPETER It_T En_Nb_Re ;                                                 
REPETER It_Comp Nb_Comp ;                                               
Comp_it = (EXTR L_Comp &It_Comp) ;                                      
CP_U = EXCO Comp_it (Sol_Dir.U.&It_T) Comp_it ;                         
L_Out = L_Out ET (EXTR CP_U 'VALE' (Pb.Gpoin)) ;                        
Fin It_Comp ;                                                           
Fin It_T ;                                                              
opti sort 'FileOUT' ;                                                   
sort 'EXCE' L_Out 'SEPA' 'ESPA';                                        
Com_Unix = CHAINE './sc_ext.sh ' NbModPOD ' ' Nb_Comp ' ' Nb_Noeu ;     
EXTE ( Com_Unix ) ;                                                     
Del_File = CHAINE 'rm FileOUT.csv' ;                                    
EXTE ( Del_File ) ;                                                     
OPTI 'ACQU' 'FileMatValS' ;                                             
ACQUERIR   Lis_ValS*LISTREEL NbModPOD ;                                 
Del_File = CHAINE 'rm FileMatValS' ;                                    
EXTE ( Del_File ) ;                                                     
Tab_Mod = TABLE ;                                                       
REPETER It_Mod NbModPOD ;                                               
REPETER It_Comp Nb_Comp ;                                               
Comp_it = (EXTR L_Comp &It_Comp) ;                                      
NomFile = CHAINE                                                        
'FileMatlab_' (ABRZ &It_Mod 3) '_Comp_' (ABRZ &It_Comp 3) ;             
OPTI 'ACQU' NomFile ;                                                   
ACQUERIR   Lis_01*LISTREEL Nb_Noeu ;                                    
Del_File = CHAINE 'rm ' NomFile ;                                       
EXTE ( Del_File ) ;                                                     
Si (&It_Comp ega 1) ;                                                   
Mod_comp = MANU 'CHPO' (Pb.Gpoin) Comp_it Lis_01 ;                      
SiNon ;                                                                 
Mod_comp = Mod_comp + (MANU 'CHPO' (Pb.Gpoin) Comp_it Lis_01) ;         
FinSi ;                                                                 
Fin It_Comp ;                                                           
Tab_Mod.&It_Mod = Mod_comp ;                                            
Fin It_Mod ;                                                            
RESPRO Lis_ValS;                                                        
RESPRO Tab_Mod;                                                         
FINPROC;                                                                
DEBPROC ABRZ Num*ENTIER Lon_Chai*Entier ;                               
CH_Num = CHAINE Num ;                                                   
Lon_Pre = DIME CH_Num ;                                                 
Si (Lon_Pre > Lon_Chai) ;                                               
Mess 'Nonmbre ' Num ' trop grand pour chaine de longueur ' Lon_Chai ;   
list (EXTR ZZZ 4) ;                                                     
SiNon ;                                                                 
Si (Lon_Pre < Lon_Chai) ;                                               
Dif_Lon = Lon_Chai - Lon_Pre ;                                          
REPETER It Dif_Lon ;                                                    
Si (&It EGA 1) ;                                                        
CH_Num = CHAINE 0 ;                                                     
SiNon ;                                                                 
CH_Num = CHAINE CH_Num 0 ;                                              
FinSi ;                                                                 
Fin It ;                                                                
CH_Num = CHAINE CH_Num Num ;                                            
FinSi ;                                                                 
FinSi ;                                                                 
RESPRO CH_Num ;                                                         
FINPROC ;                                                               
Tab_Mod = ABVZ Tab_Mod ;                                                
DEBPROC ABVZ Bas_0*TABLE ;                                              
Bas_Orth = TABLE;                                                       
REPETER It_0 ( DIMENSION Bas_0 ) ;                                      
Mod = Bas_0.&It_0 ;                                                     
Si (&It_0 > 1) ;                                                        
NorOrigi = AASZ Mod K ;                                                 
REPETER It_m ( &It_0 - 1 );                                             
Pro_f = AATZ Mod (Bas_Orth.&It_m) K ;                                   
NumMod = &It_0  ;                                                       
Mod = Mod - (Bas_Orth.&It_m * Pro_f);                                   
FIN It_m;                                                               
FinSi ;                                                                 
Mod  = (Mod / (AASZ Mod K) ) ;                                          
Bas_Orth.&It_0 = Mod ;                                                  
Fin It_0 ;                                                              
RESPRO Bas_Orth ;                                                       
FINPROC;                                                                
Tab_Pts MAI_POD = ABZZ NbModPOD ;                                       
DEBPROC ABZZ Nb_Pts*ENTIER;                                             
Si ((VALE 'DIME') > 2) ;                                                
P1 = 0. 0. 0. ;                                                         
SiNon ;                                                                 
P1 = 0. 0. ;                                                            
FinSi ;                                                                 
TAB1P = TABLE;                                                          
REPE BCL1M Nb_Pts ;                                                     
Si ((VALE 'DIME') > 2) ;                                                
TAB1P . &BCL1M = P1 PLUS (0. 0. 0.) ;                                   
SiNon ;                                                                 
TAB1P . &BCL1M = P1 PLUS (0. 0.) ;                                      
FinSi ;                                                                 
Si (&BCL1M EGA 1) ;                                                     
MAI1 = TAB1P . &BCL1M ;                                                 
SiNon ;                                                                 
MAI1 = MAI1 ET (TAB1P . &BCL1M) ;                                       
FinSi ;                                                                 
FIN BCL1M ;                                                             
RESPRO TAB1P;                                                           
RESPRO MAI1;                                                            
FINPROC;                                                                
K_red   = ABTZ Tab_Mod K ;                                              
DEBPROC ABTZ Bas_Red*TABLE Mat_Comp/RIGIDITE Vec_Comp/CHPOINT           
CHA_Comp/CHARGEMENT ;                                                   
Tai_Base = DIME Bas_Red ;                                               
Tai_Pts = DIME Tab_Pts ;                                                
Si (Tai_Pts NEG Tai_Base)                                               
Mess 'Erreur de construction des matrices reduites';                    
FinSi ;                                                                 
Si (EXISTE Mat_Comp) ;                                                  
Lis_Proj = PROG ;                                                       
REPETER It_i Tai_Base ;                                                 
f_esp_i = Bas_Red.&It_i ;                                               
REPETER It_j Tai_Base ;                                                 
f_esp_j = Bas_Red.&It_j ;                                               
Lis_Proj = Lis_Proj et (YTMX f_esp_j f_esp_i Mat_Comp) ;                
Fin It_j ;                                                              
Fin It_i ;                                                              
Mat_Proj = ACAZ Tai_Base Lis_Proj;                                      
RESPRO Mat_Proj ;                                                       
FinSi ;                                                                 
Si (EXISTE Vec_Comp) ;                                                  
Lis_Proj = PROG ;                                                       
REPETER It_i Tai_Base ;                                                 
f_esp_i = Bas_Red.&It_i ;                                               
Lis_Proj = Lis_Proj et (XTY f_esp_i Vec_Comp L_f L_f) ;                 
Fin It_i ;                                                              
Vec_Comp = MANU 'CHPO' MAI_POD 'T' Lis_Proj;                            
RESPRO Vec_Comp ;                                                       
FinSi ;                                                                 
Si (EXISTE CHA_Comp) ;                                                  
NbCharg = DIMENSION CHA_Comp ;                                          
Si (NbCharg > 0);                                                       
REPETER It_1 NbCharg ;                                                  
CHA_i = EXTR CHA_Comp CHAR &It_1 ;                                      
CHP_i = EXTR CHA_i CHAM ;                                               
EVO_i = EXTR CHA_i EVOL;                                                
Lis_Proj = PROG ;                                                       
REPETER It_i Tai_Base ;                                                 
f_esp_i = Bas_Red.&It_i ;                                               
Lis_Proj = Lis_Proj et (XTY f_esp_i CHP_i L_f LFOR) ;                   
Fin It_i ;                                                              
FOR_Proj = MANU 'CHPO' MAI_POD 'Q' Lis_Proj;                            
CHA_Proj = CHAR FORC FOR_Proj EVO_i ;                                   
Si (&It_1 EGA 1) ;                                                      
CHA_T_Pr = CHA_Proj ;                                                   
SiNon ;                                                                 
CHA_T_Pr = CHA_T_Pr et CHA_Proj ;                                       
FinSi ;                                                                 
FIN It_1 ;                                                              
RESPRO CHA_T_Pr;                                                        
SiNon ;                                                                 
RESPRO CHA_Comp;                                                        
FinSi ;                                                                 
FinSi ;                                                                 
FINPROC;                                                                
DEBPROC ACAZ Nb_Pts*ENTIER Lis_01*LISTREEL;                             
OPTI ELEM SEG2 ;                                                        
LIS1U = MOTS 'T' ;                                                      
LIS1F = MOTS 'Q' ;                                                      
KIJ = TABLE ;                                                           
REPE It_1 Nb_Pts ;                                                      
KIJ. &It_1 = TABLE ;                                                    
REPE It_2 Nb_Pts ;                                                      
KIJ.&It_1 .&It_2 = EXTR Lis_01 (&It_1 + ((&It_2-1)*Nb_Pts)) ;           
FIN It_2 ;                                                              
FIN It_1 ;                                                              
REPE It_I Nb_Pts ;                                                      
P1I = Tab_Pts . &It_I ;                                                 
REPE It_J Nb_Pts ;                                                      
SI (&It_J > &It_I) ;                                                    
P1J = Tab_Pts . &It_J ;                                                 
L1IJ = DROI 1 P1I P1J ;                                                 
LIS1R = PROG 0. (KIJ. &It_J. &It_I)                                     
(KIJ. &It_I. &It_J) 0.  ;                                               
RIG1IJ = MANU 'RIGIDITE' 'TYPE' 'RIGIDITE'                              
L1IJ LIS1U  'DUAL' LIS1F LIS1R ;                                        
SI (EGA (TYPE RIG1) 'RIGIDITE') ;                                       
RIG1 = RIG1IJ ET RIG1 ;                                                 
SINON ;                                                                 
RIG1 = RIG1IJ ;                                                         
FINSI ;                                                                 
FINSI ;                                                                 
FIN It_J ;                                                              
FIN It_I ;                                                              
REPE It_I Nb_Pts ;                                                      
LIS1R = PROG KIJ . &It_I . &It_I ;                                      
P1I = MANU POI1 (Tab_Pts . &It_I) ;                                     
RIG1IJ = MANU 'RIGIDITE' 'TYPE' 'RIGIDITE'                              
P1I LIS1U  'DUAL' LIS1F LIS1R ;                                         
Si (Nb_Pts EGA 1) ;                                                     
RIG1 = RIG1IJ ;                                                         
SiNon ;                                                                 
RIG1 = RIG1IJ ET RIG1 ;                                                 
FinSi ;                                                                 
FIN It_I ;                                                              
RESPRO RIG1 ;                                                           
FINPROC;                                                                
M_red   = ABTZ Tab_Mod M ;                                              
C_red   = ABTZ Tab_Mod C ;                                              
U0_red  = ABTZ Tab_Mod U0 ;                                             
V0_red  = ABTZ Tab_Mod V0 ;                                             
CHA_red = ABTZ Tab_Mod CHA_TOT ;                                        
CL_A_red = K_red * 0. ;                                                 
D_Imp_re = ACCZ D_Imp ;                                                 
DEBPROC ACCZ Tab_Dimp*TABLE;                                            
Tab_2 = TABLE ;                                                         
NbDimp = DIME Tab_Dimp ;                                                
Si (NbDimp > 0) ;                                                       
REPETER It_1 NbDimp ;                                                   
Tab_2.&It_1 = TABLE ;                                                   
Tab_2.&It_1 .TabEvo = COPI  (Tab_Dimp.&It_1 .TabEvo) ;                  
CL_i   = D_Imp.&It_1 .CL ;                                              
CHP_01 = MASQUE (ENLE (EXTR CL_i 'DIAG') 'LX' ) 'EGALE' 0. ;            
CHP_02 = ABTZ Tab_Mod CHP_01 ;                                          
Tab_2.&It_1 .CL     =       RELA CHP_02 ;                               
Tab_2.&It_1 .Dep    =       DEPI (Tab_2.&It_1 .CL) 1. ;                 
Fin It_1 ;                                                              
FinSi ;                                                                 
RESPRO Tab_2 ;                                                          
FINPROC;                                                                
Sol_POD = AAAZ M_red C_red K_red CL_A_red CHA_red D_Imp_re              
alpha beta gamma dt Ttot U0_red V0_red;                                 
AffMods = LECT 1 PAS 1 NbModPOD;                                        
AffSolu = LECT 1 PAS 1 NbModPOD;                                        
ErrDep ErrEner = AAPZ 'POD' DirPriv VRAI;                               
DEBPROC AAPZ Res*MOT Coord/MOT Bool2/LOGIQUE;                           
Bool1 = EXISTE Coord;                                                   
Si (EXISTE Bool2);                                                      
Bool3=Bool2;                                                            
SiNon ;                                                                 
Bool3=(NON Bool1);                                                      
FinSi ;                                                                 
ErrDepMo = PROG;                                                        
ErrParMo = PROG;                                                        
EneTot = PROG;                                                          
Si (EGA Res 'POD') ;                                                    
NbMod = DIME Tab_Mod;                                                   
FinSi ;                                                                 
Si (EGA Res 'PGD') ;                                                    
NbMod = DIMENSION FamiF.Cal ;                                           
FinSi ;                                                                 
REPETER It_m NbMod;                                                     
Si (EGA Res 'POD') ;                                                    
rec_sol = ABWZ &It_m;                                                   
FinSi ;                                                                 
Si (EGA Res 'PGD') ;                                                    
rec_sol = AALZ &It_m;                                                   
FinSi ;                                                                 
Err = AAMZ Sol_Dir.u rec_sol.u;                                         
ErrMax = PROG;                                                          
Out_Err = AAWZ (&It_m ega 1);                                           
Si Bool1;                                                               
ErrDepMo = ErrDepMo ET Out_Err.MaxErr;                                  
FinSi ;                                                                 
Si Bool3;                                                               
Si (&It_m ega 1) ;                                                      
EneTotEV = EVOL MANU T Vec_T Errr Out_Err.Tot ;                         
FinSi ;                                                                 
ErrTotEV = EVOL MANU T Vec_T Errr Out_Err.3 ;                           
ErrParMo = ErrParMo ET (SOMM ErrTotEV);                                 
FinSi ;                                                                 
Si (&It_m ega 1) ;                                                      
SolAmpli = Out_Err.SolAmpli ;                                           
FinSi ;                                                                 
FIN It_m;                                                               
Si (NbMod ega 1);                                                       
LMod = PROG 1;                                                          
SiNon ;                                                                 
LMod = (PROG 1 PAS 1 NbMod);                                            
FinSi ;                                                                 
Si Bool1;                                                               
ErrDepMo = ErrDepMo / SolAmpli;                                         
Mess 'Erreur Relative en Deplacement sur ' Coord                        
' en fonction du nombre de mode';                                       
Mess '___________________________________ :';                           
list (EVOL MANU Mode LMod Erreur ErrDepMo);                             
RESPRO ErrDepMo;                                                        
FinSi ;                                                                 
Si Bool3;                                                               
ErrParMo = ErrParMo / (EXTR (SOMM EneTotEV) 1) ;                        
Mess 'Erreur Energetique en fonction du nombre de mode';                
Mess '___________________________________ :';                           
list (EVOL MANU Mode LMod Erreur ErrParMo);                             
RESPRO ErrParMo;                                                        
FinSi ;                                                                 
FINPROC;                                                                
DEBPROC ABWZ It_m*Entier;                                               
Sol = TABLE ;                                                           
U_sol = TABLE;                                                          
V_sol = TABLE;                                                          
W_sol = TABLE;                                                          
REPETER It2 It_m;                                                       
P_POD_1 = Tab_Pts.&It2 ;                                                
REPETER It_T En_Nb_Re;                                                  
Si (&It2 ega 1) ;                                                       
U_sol.&It_T = Tab_Mod.&It2 * (EXTR (Sol_POD.U.&It_T) 'T' P_POD_1) ;     
V_sol.&It_T = Tab_Mod.&It2 * (EXTR (Sol_POD.V.&It_T) 'T' P_POD_1) ; ;   
W_sol.&It_T = Tab_Mod.&It2 * (EXTR (Sol_POD.W.&It_T) 'T' P_POD_1) ; ;   
SiNon ;                                                                 
U_sol.&It_T = U_sol.&It_T                                               
+ (Tab_Mod.&It2 *(EXTR (Sol_POD.U.&It_T) 'T' P_POD_1));                 
V_sol.&It_T = V_sol.&It_T                                               
+ (Tab_Mod.&It2 *(EXTR (Sol_POD.V.&It_T) 'T' P_POD_1));                 
W_sol.&It_T = W_sol.&It_T                                               
+ (Tab_Mod.&It2 *(EXTR (Sol_POD.W.&It_T) 'T' P_POD_1));                 
FinSi ;                                                                 
Fin It_T;                                                               
FIN It2;                                                                
Sol.U = U_sol;                                                          
Sol.V = V_sol;                                                          
Sol.W = W_sol;                                                          
RESPRO Sol;                                                             
FINPROC;                                                                
DEBPROC AAMZ Sol_1 Sol_2 ;                                              
Sol = TABLE ;                                                           
REPETER It_T En_Nb_Re ;                                                 
Sol.&It_T = Sol_1.&It_T - Sol_2.&It_T ;                                 
Fin It_T ;                                                              
RESPRO Sol ;                                                            
FINPROC;                                                                
DEBPROC AAWZ Bool4*LOGIQUE;                                             
* Reference : Sol_Dir.u                                                 
* Difference : Err                                                      
* Bool4 : Si Vrai, calcul sur la Reference : Amplitude et energie Totale
Out_Err = TABLE;                                                        
ErrEne = PROG;                                                          
ErrTotM = -0.1;                                                         
REPE IT_T En_Nb_Re;                                                     
Si Bool1;                                                               
ErrTotM = MAXI ( PROG                                                   
(MAXI (ABS ((EXCO Coord Err.&IT_T))))                                   
ErrTotM                                                                 
);                                                                      
Si Bool4;                                                               
SoluT = EXCO Coord Sol_Dir.u.&IT_T;                                     
Si (&IT_T ega 1) ;                                                      
Max_Dep = MAXI SoluT;                                                   
Min_Dep = MINI SoluT;                                                   
SiNon ;                                                                 
Max_Dep = MAXI ( PROG (MAXI SoluT) Max_Dep );                           
Min_Dep = MINI ( PROG (MINI SoluT) Min_Dep );                           
FinSi ;                                                                 
FinSi ;                                                                 
FinSi ;                                                                 
Si Bool3;                                                               
ErrEneT = XTMX Err.&IT_T K;                                             
ErrEne = ErrEne et ErrEneT;                                             
Si Bool4 ;                                                              
EneTotT = XTMX Sol_Dir.u.&IT_T K;                                       
EneTot = EneTot et EneTotT;                                             
FinSi ;                                                                 
FinSi ;                                                                 
FIN IT_T;                                                               
Si Bool1;                                                               
Out_Err.MaxErr = ErrTotM;                                               
Si Bool4 ;                                                              
Out_Err.SolAmpli = Max_Dep - Min_Dep;                                   
FinSi ;                                                                 
FinSi ;                                                                 
Si Bool3;                                                               
Si Bool4 ;                                                              
Out_Err.Tot = EneTot;                                                   
FinSi ;                                                                 
Out_Err.3 = ErrEne;                                                     
FinSi ;                                                                 
RESPRO Out_Err;                                                         
FINPROC;                                                                
AAKZ POD AffMods AffSolu P3 DirPriv (Pb.lambda) 'U';                    
DEBPROC ABXZ Sol_POD*TABLE ;                                            
LIS_gran = MOTS 'U' 'V' 'W';                                            
FamPOD_T = TABLE ;                                                      
Tai_Base = NbModPOD ;                                                   
REPE It_m Tai_Base ;                                                    
FamPOD_T.&It_m = TABLE ;                                                
REPE It_g 3 ;                                                           
V_grand = EXTR LIS_gran &It_g ;                                         
FamPOD_T.&It_m .V_grand = PROG ;                                        
Fin It_g ;                                                              
Fin It_m ;                                                              
REPE It_T En_Nb_Re ;                                                    
REPE It_g 3 ;                                                           
V_grand = EXTR LIS_gran &It_g ;                                         
CHP_T = Sol_POD.V_grand.&It_T ;                                         
REPE It_m Tai_Base ;                                                    
P_i = Tab_Pts.&It_m ;                                                   
FamPOD_T.&It_m .V_grand = (FamPOD_T.&It_m .V_grand) ET                  
(PROG (EXTR CHP_T T P_i)) ;                                             
Fin It_m ;                                                              
Fin It_g ;                                                              
Fin It_T ;                                                              
RESPRO FamPOD_T ;                                                       
FINPROC;                                                                
FamiF = TABLE;                                                          
FamiG = TABLE;                                                          
FamiF.Cal = TABLE;                                                      
FamiG.Cal = TABLE;                                                      
FamiF.Imp = TABLE;                                                      
FamiG.Imp = TABLE;                                                      
FamiF.Ini = TABLE;                                                      
FamiG.Ini = TABLE;                                                      
NbModCal = 4;                                                           
OPT0 = TABLE;                                                           
OPT0.Orth = VRAI;                                                       
OPT0.Upda = VRAI;                                                       
PGDPt_Fx = FAUX;                                                        
Up_Pt_Fx = VRAI;                                                        
Pb.lambda = 0.5;                                                        
TEMPS ZERO;                                                             
AARZ NbModCal ;                                                         
DEBPROC AARZ NbModCal*Entier Fam_F/TABLE Fam_G/TABLE ;                  
NbDImp  = DIME D_Imp ;                                                  
Val_Ini = 0;                                                            
Si ((XTMX U0 K) neg 0);                                                 
Val_Ini = Val_Ini + 1;                                                  
Nor_f = AASZ U0 K;                                                      
FamiF.Ini.Val_Ini = U0 / Nor_f ;                                        
FamiG.Ini.Val_Ini = TABLE;                                              
FamiG.Ini.Val_Ini .u = PROG En_Nb_Re * Nor_f ;                          
FamiG.Ini.Val_Ini .v = PROG En_Nb_Re * 0. ;                             
FamiG.Ini.Val_Ini .w = PROG En_Nb_Re * 0. ;                             
FinSi ;                                                                 
Si ((XTMX V0 K) neg 0);                                                 
Val_Ini = Val_Ini + 1;                                                  
Nor_f = AASZ V0 K ;                                                     
FamiF.Ini.Val_Ini = V0 / Nor_f ;                                        
FamiG.Ini.Val_Ini = TABLE;                                              
FamiG.Ini.Val_Ini .u = PROG 0. PAS dt Ttot ;                            
FamiG.Ini.Val_Ini .u = (FamiG.Ini.Val_Ini .u) * Nor_f ;                 
FamiG.Ini.Val_Ini .v = PROG En_Nb_Re * Nor_f ;                          
FamiG.Ini.Val_Ini .w = PROG En_Nb_Re * 0. ;                             
FinSi ;                                                                 
Si (NbDImp > 0) ;                                                       
Val_Imp = 0 ;                                                           
REPETER It_0 NbDImp ;                                                   
Val_Imp = Val_Imp + 1 ;                                                 
CL_i     = D_Imp.&It_0 .CL ;                                            
CL_A = CL_A ET CL_i ;                                                   
CHP_01 = MASQUE (EXCO (EXTR CL_i 'DIAG') 'LX' 'LX') 'EGALE' 0. ;        
CHP_02 = (CL_i * CHP_01)  ;                                             
CHP_03 = CHAN 'COMP' CHP_02 LFOR L_f ;                                  
Nor_f = AASZ CHP_03 ;                                                   
CHP_04 = CHP_03 / Nor_f ;                                               
CHP_Imp0 = RESO (K ET Pb.CL_Tot_i) CHP_02;                              
CHP_Imp1 = CHP_Imp0 / (AATZ CHP_Imp0 CHP_04) ;                          
FamiF.Imp.Val_Imp = CHP_Imp1 ;                                          
FamiG.Imp.Val_Imp = TABLE;                                              
FamiG.Imp.Val_Imp .u = (EXTR (D_Imp.&It_0 .TabEvo.U) ORDO) * Nor_f ;    
FamiG.Imp.Val_Imp .v = (EXTR (D_Imp.&It_0 .TabEvo.V) ORDO) * Nor_f ;    
FamiG.Imp.Val_Imp .w = (EXTR (D_Imp.&It_0 .TabEvo.W) ORDO) * Nor_f ;    
Fin It_0 ;                                                              
FinSi ;                                                                 
Tai_Pre = 0;                                                            
Si (EXISTE Fam_F) ;                                                     
Tai_Pre = DIME Fam_F ;                                                  
Bool_Pre = VRAI;                                                        
FinSi ;                                                                 
REPETER It_m NbModCal;                                                  
Bool_1 = (OPT0.Orth) ET (&It_m > 1);                                    
Bool_2 = Bool_1 et (OPT0.Upda) ;                                        
Si (&It_m <EG Tai_Pre) ;                                                
Si Bool_Pre ;                                                           
FamiF.Cal = Fam_F ;                                                     
Si (EXISTE Fam_G) ;                                                     
FamiG.Cal = Fam_G ;                                                     
SiNon ;                                                                 
Si (OPT0.Upda) ;                                                        
FamiG.Cal= AAVZ ;                                                       
SiNon ;                                                                 
Mess 'Sans FamiG et Sans update' ;                                      
FinSi ;                                                                 
FinSi;                                                                  
Bool_Pre = FAUX;                                                        
FinSi;                                                                  
SiNon ;                                                                 
REPETER Ort -1;                                                         
f_espa g_tmps = AAFZ M C K CL_A Ttot schema CHA_TOT dt &It_m;           
Si Bool_1;                                                              
f_espa FamiG = AAQZ;                                                    
N_f_espa = AASZ f_espa  K ;                                             
Mess 'f_espaNEW = ' N_f_espa ;                                          
Si (N_f_espa < 0.1);                                                    
Mess 'Mode rejete';                                                     
SiNon ;                                                                 
f_espa = f_espa/N_f_espa;                                               
QUITTER Ort;                                                            
FinSi ;                                                                 
SiNon ;                                                                 
QUITTER Ort;                                                            
FinSi ;                                                                 
Fin Ort;                                                                
FamiF.Cal.&It_m = f_espa;                                               
Si Bool_2;                                                              
FamiG.Cal= AAVZ;                                                        
SiNon ;                                                                 
FamiG.Cal.&It_m = g_tmps;                                               
FinSi ;                                                                 
ErrDepl ErrGlob = AAXZ DirPriv VRAI &It_m;                              
Mess 'ErrDepl=' ErrDepl 'ErrGlob=' ErrGlob;                             
FinSi ;                                                                 
Fin It_m;                                                               
FINPROC;                                                                
DEBPROC AAFZ M C K CL_A Ttot schema CHA dt It_m ;                       
g_init = TABLE;                                                         
g_init.w = PROG En_Nb_Re * 1. ;                                         
g_init.v = PROG 0. PAS dt Ttot ;                                        
g_init.u = ((g_init.v)**2) /2 ;                                         
TabEvoNL = TABLE;                                                       
g_tmps = g_init;                                                        
*gev_ = TABLE;                                                          
*fev_ = TABLE;                                                          
REPETER It 10;                                                          
Mess '  ' &It;                                                          
f_espa = AABZ M C K CL_A CHA dt g_tmps It_m ;                           
Nor_f = AASZ f_espa K;                                                  
f_espa = f_espa/Nor_f ;                                                 
*fev_.&It = f_espa ;                                                    
g_tmps TabEvoNL = AAEZ M C K Ttot schema CHA dt f_espa It_m ;           
*gev_.&It = g_tmps ;                                                    
Bool = &It > 1 ;                                                        
Si Bool;                                                                
BoolConv = AAHZ f_espa g_tmps f_prec g_prec;                            
Si BoolConv;                                                            
QUIT It;                                                                
FinSi ;                                                                 
FinSi ;                                                                 
f_prec = f_espa;                                                        
g_prec = g_tmps;                                                        
Fin It ;                                                                
Mess '___';                                                             
RESPRO f_espa ;                                                         
RESPRO g_tmps ;                                                         
FINPROC;                                                                
DEBPROC AABZ M C K CL_A CHA dt g It_m ;                                 
Int1 = AADZ g.u g.u dt ;                                                
Int2 = AADZ g.v g.u dt ;                                                
Int3 = AADZ g.w g.u dt ;                                                
Premier = (Int1*K) et (Int2*C) et (Int3*M);                             
* Contribution des efforts                                              
NbCharg = DIMENSION CHA ;                                               
Si (NbCharg > 0);                                                       
REPETER It NbCharg ;                                                    
CHA_i = EXTR CHA CHAR &It ;                                             
CHP_i = EXTR CHA_i CHAM ;                                               
EVO_i = EXTR CHA_i EVOL ;                                               
CH_ord = EXTR EVO_i ORDO ;                                              
CH_abs = EXTR EVO_i ABSC ;                                              
Int = AADZ CH_ord g.u CH_abs ;                                          
Si (&It ega 1) ;                                                        
Second = (CHP_i*Int) ;                                                  
SiNon ;                                                                 
Second = Second + (CHP_i*Int) ;                                         
FinSi ;                                                                 
FIN It ;                                                                
FinSi ;                                                                 
Si ( (DIME TabEvoNL) > 0) ;                                             
REPETER It_NL Nb_NL ;                                                   
FOR_NL = (Pb.Tab_NL.&It_NL.effo) ;                                      
CH_ord = EXTR (TabEvoNL.&It_NL) ORDO ;                                  
Int = AADZ CH_ord g.u Vec_T ;                                           
Si ( (NbCharg > 0) et (&It_NL ega 1) );                                 
Second = Second + (FOR_NL*Int) ;                                        
SiNon ;                                                                 
Second = (FOR_NL*Int) ;                                                 
FinSi ;                                                                 
Fin It_NL ;                                                             
FinSi ;                                                                 
* La somme sur les modes precedents                                     
FamiFTot FamiGTot = AAUZ (It_m-1) ;                                     
TailFami = DIMENSION FamiFTot;                                          
Si (TailFami > 0);                                                      
Som1 = 0;                                                               
Som2 = 0;                                                               
Som3 = 0;                                                               
REPETER Mod TailFami;                                                   
gk = FamiGTot.&Mod;                                                     
fk = FamiFTot.&Mod;                                                     
g_gk   = AADZ g.u gk.u dt ;                                             
g_gkp  = AADZ g.u gk.v dt ;                                             
g_gkpp = AADZ g.u gk.w dt ;                                             
Som1 = Som1 + (g_gk   * fk);                                            
Som2 = Som2 + (g_gkp  * fk);                                            
Som3 = Som3 + (g_gkpp * fk);                                            
Fin Mod;                                                                
Si (NbCharg > 0);                                                       
Second = Second - ( (K*Som1) + (C*Som2) + (M*Som3) ) ;                  
SiNon ;                                                                 
Second =  (-1) * ( (K*Som1) + (C*Som2) + (M*Som3) ) ;                   
FinSi ;                                                                 
FinSi ;                                                                 
Si ((NON (NbCharg > 0)) ET (NON (TailFami > 0)));                       
Mess 'il n y a ni effort ni deplacements imposes';                      
Mess '--------------------------------------------';                    
list CHA.1;                                                             
FinSi ;                                                                 
* Resolution                                                            
Premier = Premier ET CL_A;                                              
f = RESO Premier Second;                                                
RESPRO f;                                                               
FINPROC;                                                                
DEBPROC AADZ g1*Listreel g2*listreel dt/flottant Vec_LocT/listreel;     
Long1=DIMENSION g1;                                                     
Long2=DIMENSION g2;                                                     
Bool = Long1 NEG Long2;                                                 
Si Bool;                                                                
Mess 'Produit de fonctions de differentes longueurs';                   
Mess 'taille g1:' Long1 '   taille g2:' Long2;                          
* Couper le programme                                                   
EXTR zzz 4;                                                             
FinSi ;                                                                 
g1_p = ENLEVER g1 1;                                                    
g1_m = ENLEVER g1 (DIMENSION g1);                                       
g2_p = ENLEVER g2 1;                                                    
g2_m = ENLEVER g2 (DIMENSION g2);                                       
Bool = EXISTE Vec_LocT;                                                 
Si Bool;                                                                
Vec_LT_p = ENLEVER Vec_LocT 1;                                          
Vec_LT_m = ENLEVER Vec_LocT (DIMENSION Vec_LocT);                       
dt = Vec_LT_p - Vec_LT_m;                                               
FinSi ;                                                                 
L_a = (g1_p-g1_m)/dt;                                                   
L_e = (g2_p-g2_m)/dt;                                                   
*  Int_list =  ( ((dt**3)/3) * (a*e) )                                  
*                +( ((dt**2)/2) * ((a*g2_m)+(e*g1_m)) )                 
*                +(   dt        * g2_m * g1_m ) ;                       
* L operateur SOMME va integrer et donc multiplier par dt chaque        
*   intervale.                                                          
Int_list =  ( ((dt**2)/3) * (L_a*L_e) )                                 
+( (dt/2) * ((L_a*g2_m)+(L_e*g1_m)) )                                   
+( g2_m * g1_m ) ;                                                      
Si Bool ;                                                               
Int_EVO = EVOL MANU (ENLEVER Vec_LocT (DIMENSION Vec_LocT))  Int_list ; 
Int_b = (EXTR (SOMME Int_EVO) 1)                                        
+( (  ( (EXTR Int_list 1) * (EXTR dt 1) )                               
+ ( (EXTR Int_list (DIMENSION Int_list)) *                              
(EXTR dt (DIMENSION dt))   )                                            
)/2) ;                                                                  
SiNon ;                                                                 
Int_EVO = EVOL MANU (ENLEVER Vec_T (DIMENSION Vec_T))  Int_list ;       
Int_b = (EXTR (SOMME Int_EVO) 1)                                        
+ (( (EXTR Int_list 1)                                                  
+(EXTR Int_list (DIMENSION Int_list))                                   
)*(dt/2));                                                              
FinSi ;                                                                 
RESPRO Int_b;                                                           
FINPROC;                                                                
DEBPROC AAUZ NbMod*Entier;                                              
LisMotFa = MOTS 'IMP' 'INI' 'CAL';                                      
NumeCoup = 0;                                                           
FamiFTot = TABLE;                                                       
FamiGTot = TABLE;                                                       
REPETER Catego (DIME LisMotFa);                                         
Categori = EXTR LisMotFa &Catego;                                       
NbModCat =(DIME FamiF.Categori);                                        
Si (NbModCat > 0);                                                      
Si (neg Categori 'CAL');                                                
REPETER ItCoupl NbModCat;                                               
NumeCoup = NumeCoup + 1;                                                
FamiFTot.NumeCoup = FamiF.Categori.&ItCoupl;                            
FamiGTot.NumeCoup = FamiG.Categori.&ItCoupl;                            
FIN ItCoupl;                                                            
SiNon ;                                                                 
Si (NbMod > 0);                                                         
Si (NbMod > NbModCat);                                                  
Mess 'Il n y a que ' NbModCat ' modes, pas ' NbMod;                     
list FamiF.Categori.NbMod;                                              
FinSi ;                                                                 
REPETER ItCoupl NbMod;                                                  
NumeCoup = NumeCoup + 1;                                                
FamiFTot.NumeCoup = FamiF.Categori.&ItCoupl;                            
FamiGTot.NumeCoup = FamiG.Categori.&ItCoupl;                            
FIN ItCoupl;                                                            
FinSi ;                                                                 
FinSi ;                                                                 
FinSi ;                                                                 
FIN Catego;                                                             
RESPRO FamiFTot;                                                        
RESPRO FamiGTot;                                                        
FINPROC;                                                                
DEBPROC AAEZ M C K Ttot schema CHA dt f It_m ;                          
* Creer un procedure pour le schema                                     
alpha = 0.;                                                             
beta = 1./4;                                                            
gamma = 1./2;                                                           
* Cette partie ne pourra plus etre hors de la boucle en non lineaire    
Prem_g = XTMX f_espa K ;                                                
Prem_gp = XTMX f_espa C ;                                               
Prem_gpp = XTMX f_espa M ;                                              
NbCharg = DIMENSION CHA ;                                               
Bool1 = (NbCharg > 0);                                                  
Si Bool1;                                                               
REPETER It_T NbCharg ;                                                  
CHA_i = EXTR CHA CHAR &It_T ;                                           
CHP_i = EXTR CHA_i CHAM ;                                               
FOR_proj = XTY CHP_i f LFOR L_f;                                        
EVO_i = EXTR CHA_i EVOL ;                                               
Si (&It_T ega 1) ;                                                      
FOR_EVO = EVO_i*FOR_proj ;                                              
SiNon ;                                                                 
FOR_EVO = FOR_EVO + (EVO_i * FOR_proj) ;                                
FinSi ;                                                                 
FIN It_T ;                                                              
F_Hist = EXTR FOR_EVO ORDO ;                                            
F_Hist2 = (PROG (EXTR F_Hist 1)) et F_Hist;                             
F_Hist2 = ENLEVER F_Hist2 (DIMENSION F_Hist2);                          
Second = ((1+alpha)*F_Hist) - (alpha*F_Hist2);                          
FinSi ;                                                                 
Si ( Nb_NL > 0) ;                                                       
FNL_proj = TABLE ;                                                      
UNL_proj = TABLE ;                                                      
TabLisNL = TABLE ;                                                      
REPETER It_NL Nb_NL ;                                                   
FNL_proj.&It_NL = XTY (Pb.Tab_NL.&It_NL.effo) f LFOR L_f ;              
Si ( EXISTE (Pb.Tab_NL.&It_NL) Poi_int ) ;                              
UNL_proj.&It_NL = (EXTR f (Pb.Tab_NL.&It_NL.Dir_int)                    
(Pb.Tab_NL.&It_NL.Poi_int)) * (Pb.Tab_NL.&It_NL.fac_int) ;              
SiNon ;                                                                 
UNL_proj.&It_NL = XTY (Pb.Tab_NL.&It_NL.ch_depen) f LFOR L_f;           
FinSi ;                                                                 
TabLisNL.&It_NL = PROG ;                                                
Fin It_NL ;                                                             
FinSi ;                                                                 
FamiFTot FamiGTot = AAUZ (It_m-1) ;                                     
* Contribution des modes precendents                                    
TailFami = DIMENSION FamiFTot;                                          
Si (TailFami > 0);                                                      
REPETER Mod TailFami;                                                   
gk = FamiGTot.&Mod;                                                     
fk = FamiFTot.&Mod;                                                     
f_K_fk = YTMX f fk K;                                                   
f_C_fk = YTMX f fk C;                                                   
f_M_fk = YTMX f fk M;                                                   
Si (&Mod ega 1) ;                                                       
ModsPrec = (f_K_fk * gk.u) + (f_C_fk * gk.v) + (f_M_fk * gk.w) ;        
SiNon ;                                                                 
ModsPrec = ModsPrec +                                                   
(f_K_fk * gk.u) + (f_C_fk * gk.v) + (f_M_fk * gk.w);                    
FinSi ;                                                                 
Fin Mod;                                                                
Si Bool1;                                                               
Second = Second - ModsPrec;                                             
SiNon ;                                                                 
Second = (-1) * ModsPrec;                                               
FinSi ;                                                                 
FinSi ;                                                                 
Si ((NON Bool1) ET (NON (TailFami > 0)));                               
Mess 'il n y a ni effort ni deplacements imposes';                      
Mess '--------------------------------------------';                    
list CHA.1;                                                             
FinSi ;                                                                 
g = PROG ;                                                              
gp = PROG ;                                                             
gpp = PROG ;                                                            
REPETER It_T En_Nb_Re;                                                  
Si (&It_T ega 1);                                                       
g_t = 0. ;                                                              
gp_t = 0. ;                                                             
g__tm1 = 0. ;                                                           
gp__tm1 = 0. ;                                                          
gpp_t = 0. ;                                                            
g_pred = 0. ;                                                           
gp_pred = 0. ;                                                          
SiNon ;                                                                 
g_pred = g_t + ((1+alpha)*((dt*gp_t) + ((dt**2)*(0.5-beta)*gpp_t)));    
gp_pred = gp_t + ((1+alpha)*dt*(1-gamma)*gpp_t ) ;                      
FinSi ;                                                                 
SecondT = EXTR Second &It_T ;                                           
Si ( Nb_NL > 0) ;                                                       
gpp_t gp_t g_t = ABPZ SecondT &It_T 'PGD' PGDPt_Fx ;                    
SiNon ;                                                                 
gpp_t gp_t g_t = ABJZ SecondT &It_T;                                    
FinSi ;                                                                 
g =   g   et (PROG g_t  ) ;                                             
gp =  gp  et (PROG gp_t ) ;                                             
gpp = gpp et (PROG gpp_t) ;                                             
g__tm1 = g_t ;                                                          
gp__tm1 = gp_t ;                                                        
Fin It_T ;                                                              
g_tmps = TABLE;                                                         
g_tmps.u = g;                                                           
g_tmps.v = gp;                                                          
g_tmps.w = gpp;                                                         
RESPRO g_tmps;                                                          
TabEvoNL = TABLE ;                                                      
Si ( Nb_NL > 0) ;                                                       
REPETER It_NL Nb_NL ;                                                   
TabEvoNL.&It_NL = EVOL MANU T Vec_T F(T) (TabLisNL.&It_NL) ;            
Fin It_NL ;                                                             
FinSi ;                                                                 
RESPRO TabEvoNL ;                                                       
FINPROC;                                                                
DEBPROC ABJZ Seco_0_T*FLOTTANT It_0_T*ENTIER;                           
gpp_t_pr = gpp_t;                                                       
gpp_0_t = (Seco_0_T - ((Prem_g*g_pred)+(Prem_gp*gp_pred)))/Prem_gpp;    
Si (It_0_T ega 1) ;                                                     
g_0_t = 0 ;                                                             
gp_0_t = 0 ;                                                            
SiNon ;                                                                 
g_0_t = g__tm1 + (dt*gp__tm1)                                           
+ ((dt**2)*(0.5-beta)*gpp_t_pr)                                         
+ (beta*(dt**2)*gpp_0_t) ;                                              
gp_0_t = gp__tm1 + (dt*(1-gamma)*gpp_t_pr) + (dt*gamma*gpp_0_t) ;       
FinSi ;                                                                 
RESPRO gpp_0_t ;                                                        
RESPRO gp_0_t ;                                                         
RESPRO g_0_t ;                                                          
FINPROC;                                                                
DEBPROC AAHZ f1 g1 f2 g2;                                               
* Norme L2                                                              
* uKu + uCv + uMa                                                       
Res1 Res2 = AAIZ;                                                       
* Approximation                                                         
*Res1 Res2 = AAJZ;                                                      
epsilon = 1e-10 ;                                                       
Bool = (Res2/Res1) < epsilon ;                                          
*Bool = ((Res1 < epsilon) et (Res2 < epsilon)) ;                        
RESPRO Bool ;                                                           
FINPROC;                                                                
DEBPROC AAIZ ;                                                          
* Equation dans LaTeX                                                   
* Si K C et M non symetriques recalculer f2*.*f1                        
f1Kf1 = XTMX f1 K;                                                      
f1Kf2 = YTMX f1 f2 K;                                                   
f2Kf2 = XTMX f2 K;                                                      
f1Cf1 = XTMX f1 C;                                                      
f1Cf2 = YTMX f1 f2 C;                                                   
f2Cf2 = XTMX f2 C;                                                      
f1Mf1 = XTMX f1 M;                                                      
f1Mf2 = YTMX f1 f2 M;                                                   
f2Mf2 = XTMX f2 M;                                                      
g1_g1 = AADZ g1.u g1.u dt ;                                             
g1_g2 = AADZ g1.u g2.u dt ;                                             
g2_g2 = AADZ g2.u g2.u dt ;                                             
g1_g1p = AADZ g1.u g1.v dt ;                                            
g1_g2p = AADZ g1.u g2.v dt ;                                            
g1p_g2 = AADZ g1.v g2.u dt ;                                            
g2_g2p = AADZ g2.u g2.v dt ;                                            
g1_g1pp = AADZ g1.u g1.w dt ;                                           
g1_g2pp = AADZ g1.u g2.w dt ;                                           
g1pp_g2 = AADZ g1.w g2.u dt ;                                           
g2_g2pp = AADZ g2.u g2.w dt ;                                           
Res2 = ((g1_g1*f1Kf1) - (2*(g1_g2)*f1Kf2)) + (g2_g2*f2Kf2)              
+ ((g1_g1p *f1Cf1) -((g1_g2p +g1p_g2 )*f1Cf2) ) + (g2_g2p *f2Cf2)       
+ ((g1_g1pp*f1Mf1) -((g1_g2pp+g1pp_g2)*f1Mf2) ) + (g2_g2pp*f2Mf2) ;     
Res1 = (g1_g1*f1Kf1) + (g1_g1p *f1Cf1) + (g1_g1pp*f1Mf1) ;              
RESPRO Res1;                                                            
RESPRO Res2;                                                            
FINPROC;                                                                
DEBPROC AAXZ Coord/MOT Bool2/LOGIQUE Mode/ENTIER                        
Ref_Cal/TABLE Sol_Cal/Table;                                            
Bool1 = EXISTE Coord;                                                   
Si (EXISTE Bool2);                                                      
Bool3=Bool2;                                                            
SiNon ;                                                                 
Bool3=(NON Bool1);                                                      
FinSi ;                                                                 
EneTot = PROG;                                                          
Si (EXISTE Mode) ;                                                      
rec_sol = AALZ Mode;                                                    
Err = AAMZ Sol_Dir.u rec_sol.u;                                         
SiNon ;                                                                 
Err = AAMZ Ref_Cal.u Sol_Cal.u;                                         
FinSi ;                                                                 
Out_Err = AAWZ VRAI;                                                    
Si Bool1;                                                               
ErrDepl = Out_Err.MaxErr;                                               
ErrDepl = ErrDepl / Out_Err.SolAmpli;                                   
RESPRO ErrDepl;                                                         
FinSi ;                                                                 
Si Bool3;                                                               
EneTotEV = EVOL MANU T Vec_T Errr Out_Err.Tot ;                         
ErrTotEV = EVOL MANU T Vec_T Errr Out_Err.3 ;                           
ErrGlob = (EXTR (SOMM ErrTotEV) 1) / (EXTR (SOMM EneTotEV) 1) ;         
RESPRO ErrGlob;                                                         
FinSi ;                                                                 
FINPROC;                                                                
DEBPROC AALZ It_m*Entier;                                               
Sol = TABLE ;                                                           
U_sol = TABLE;                                                          
V_sol = TABLE;                                                          
A_sol = TABLE;                                                          
FamiFTot FamiGTot = AAUZ It_m ;                                         
NbMod = (DIME FamiFTot);                                                
REPETER It2 NbMod;                                                      
REPETER It_T En_Nb_Re;                                                  
Si (&It2 ega 1) ;                                                       
U_sol.&It_T = FamiFTot.&It2 * (EXTR FamiGTot.&It2.u &It_T) ;            
V_sol.&It_T = FamiFTot.&It2 * (EXTR FamiGTot.&It2.v &It_T) ;            
A_sol.&It_T = FamiFTot.&It2 * (EXTR FamiGTot.&It2.w &It_T) ;            
SiNon ;                                                                 
U_sol.&It_T = U_sol.&It_T                                               
+ (FamiFTot.&It2 *(EXTR FamiGTot.&It2.u &It_T));                        
V_sol.&It_T = V_sol.&It_T                                               
+ (FamiFTot.&It2 *(EXTR FamiGTot.&It2.v &It_T));                        
A_sol.&It_T = A_sol.&It_T                                               
+ (FamiFTot.&It2 *(EXTR FamiGTot.&It2.w &It_T));                        
FinSi ;                                                                 
Fin It_T;                                                               
FIN It2;                                                                
Sol.U = U_sol;                                                          
Sol.V = V_sol;                                                          
Sol.W = A_sol;                                                          
RESPRO Sol;                                                             
FINPROC;                                                                
DEBPROC AAQZ ;                                                          
Mess 'Verification de l orthogonalite';                                 
REPETER It_m (DIMENSION FamiF.Cal );                                    
REPETER It2_m (DIMENSION FamiF.Cal );                                   
Pro_f = AATZ (FamiF.Cal.&It_m) (FamiF.Cal.&It2_m) K;                    
Mess 'Mode ' &It_m ' et ' &It2_m ' : ' Pro_f;                           
FIN It2_m;                                                              
FIN It_m;                                                               
Mess 'Gramm-Shmidt';                                                    
NorOrigi = AASZ f_espa K;                                               
REPETER It_m (DIMENSION FamiF.Cal );                                    
Pro_f = AATZ f_espa (FamiF.Cal.&It_m) K;                                
NumMod = (DIMENSION FamiF.Cal ) + 1 ;                                   
Mess 'Mode ' &It_m ' et ' NumMod ' : ' Pro_f;                           
FamiG.Cal.&It_m.u = FamiG.Cal.&It_m.u + (g_tmps.u * Pro_f);             
FamiG.Cal.&It_m.v = FamiG.Cal.&It_m.v + (g_tmps.v * Pro_f);             
FamiG.Cal.&It_m.w = FamiG.Cal.&It_m.w + (g_tmps.w * Pro_f);             
f_espa = f_espa - (FamiF.Cal.&It_m * Pro_f);                            
NorInter = (AASZ f_espa K);                                             
Mess 'NORME = ' NorInter;                                               
FIN It_m;                                                               
RESPRO f_espa ;                                                         
RESPRO FamiG ;                                                          
FINPROC;                                                                
DEBPROC AAVZ;                                                           
* Maillage necessaire pour creer les objets de calculs                  
*   Rigidite et Second membre                                           
P_1 MAI1= ABYZ ;                                                        
TaiSys = DIMENSION FamiF.Cal;                                           
Lis1Up = PROG ((TaiSys*3)**2)* 0. ;                                     
Lis1Init = PROG (TaiSys**2)* 0. ;                                       
LISU_ini = MOTS ;                                                       
LISF_ini = MOTS ;                                                       
REPE BCL1M TaiSys ;                                                     
Num = ((3 * (&BCL1M - 1) ) + 1);                                        
COU1 = CHAIN 'U' Num ;                                                  
COF1 = CHAIN 'F' Num ;                                                  
LISU_ini = LISU_ini ET (MOTS COU1) ;                                    
LISF_ini = LISF_ini ET (MOTS COF1) ;                                    
FIN BCL1M ;                                                             
Tab_Mat = TABLE;                                                        
Tab_Mat.1 = M ;                                                         
Tab_Mat.2 = C ;                                                         
Tab_Mat.3 = K ;                                                         
LISU_tot = MOTS ;                                                       
LISF_tot = MOTS ;                                                       
REPE BCL1M (TaiSys*3) ;                                                 
COU1 = CHAIN 'U' &BCL1M ;                                               
COF1 = CHAIN 'F' &BCL1M ;                                               
LISU_tot = LISU_tot ET (MOTS COU1) ;                                    
LISF_tot = LISF_tot ET (MOTS COF1) ;                                    
FIN BCL1M ;                                                             
Cha_proj = TABLE;                                                       
Cha_proj.Ffi = TABLE;                                                   
Cha_proj.F_t = TABLE;                                                   
Cha_proj.Ff_init = TABLE;                                               
NL_proj = TABLE;                                                        
NL_proj.Ffi = TABLE;                                                    
NL_proj.Ff_init = TABLE;                                                
NL_proj.Dfi = TABLE;                                                    
NL_proj.Eva_Impo = TABLE;                                               
L_F_NL = PROG ;                                                         
* Contribution des efforts                                              
NbCharg = DIMENSION CHA_TOT ;                                           
Si (NbCharg > 0);                                                       
REPETER It_1 NbCharg ;                                                  
CHA_i = EXTR CHA_TOT CHAR &It_1 ;                                       
CHP_i = EXTR CHA_i CHAM ;                                               
EVO_i = EXTR CHA_i EVOL;                                                
Cha_proj.F_t.&It_1 = EXTR EVO_i ORDO ;                                  
Lis_Ffi = PROG;                                                         
Lis_Init = PROG;                                                        
REPETER It_2 TaiSys;                                                    
f_i = FamiF.Cal.&It_2;                                                  
FOR_proj = XTY CHP_i f_i LFOR L_f;                                      
Lis_Init = Lis_Init ET (PROG FOR_proj);                                 
Lis_Ffi = Lis_Ffi ET (PROG FOR_proj 0 0);                               
FIN It_2;                                                               
* Modifier , passer d une liste a un chpoint                            
CHP1 = MANU 'CHPO' MAI1 LISF_ini Lis_Init;                              
Cha_proj.Ff_init.&It_1 = CHP1;                                          
CHP1 = MANU 'CHPO' MAI1 LISF_tot Lis_Ffi;                               
Cha_proj.Ffi.&It_1 = CHP1;                                              
FIN It_1 ;                                                              
FinSi ;                                                                 
* Contribution des modes initiaux et imposes                            
FamiFIni FamiGIni = AAUZ 0 ;                                            
NbModIni = DIMENSION FamiFIni ;                                         
Si (NbModIni > 0) ;                                                     
LIS_V_1 = MOTS 'fMf' 'fCf' 'fKf';                                       
LIS_V_2 = MOTS 'g_A' 'g_V' 'g_U';                                       
Tab_Ini = TABLE ;                                                       
REPETER It_1 NbModIni ;                                                 
Tab_Ini.&It_1 = TABLE ;                                                 
f_ini = FamiFIni.&It_1 ;                                                
REPETER It_2 TaiSys ;                                                   
Lis_Vec = PROG ;                                                        
f_ligne = FamiF.Cal.&It_2 ;                                             
REPETER It_3 3 ;                                                        
Val1 = YTMX f_ini f_ligne Tab_Mat.&It_3 ;                               
Lis_Vec = Lis_Vec ET (PROG Val1) ;                                      
Fin It_3;                                                               
Tab_Ini.&It_1 .&It_2 =  MANU 'CHPO' MAI1 LIS_V_1 Lis_Vec ;              
FIN It_2;                                                               
Tab_Ini.&It_1.g = FamiGIni.&It_1 ;                                      
Fin It_1 ;                                                              
FinSi ;                                                                 
* Contribution Non Lineaire                                             
Si (Nb_NL > 0) ;                                                        
TabLisNL = TABLE ;                                                      
REPETER It_NL Nb_NL ;                                                   
TabLisNL.&It_NL = PROG ;                                                
Lis_Ffi = PROG;                                                         
Lis_Init = PROG;                                                        
Lis_Dfi = PROG ;                                                        
REPETER It_2 TaiSys;                                                    
f_i = FamiF.Cal.&It_2;                                                  
FNL_proj = XTY (Pb.Tab_NL.&It_NL.effo) f_i LFOR L_f ;                   
Si ( EXISTE (Pb.Tab_NL.&It_NL) Poi_int ) ;                              
UNL_proj = (EXTR f_i (Pb.Tab_NL.&It_NL.Dir_int)                         
(Pb.Tab_NL.&It_NL.Poi_int)) * (Pb.Tab_NL.&It_NL.fac_int)  ;             
SiNon ;                                                                 
UNL_proj = XTY (Pb.Tab_NL.&It_NL.ch_depen) f_i LFOR L_f;                
FinSi ;                                                                 
Lis_Init = Lis_Init ET (PROG FNL_proj);                                 
Lis_Ffi = Lis_Ffi ET (PROG FNL_proj 0 0);                               
Lis_Dfi = Lis_Dfi ET (PROG UNL_proj);                                   
FIN It_2;                                                               
Si (NbModIni > 0) ;                                                     
NL_proj.Eva_Impo.&It_NL = TABLE;                                        
REPETER It_Impo NbModIni ;                                              
NL_proj.Eva_Impo.&It_NL.&It_Impo = TABLE;                               
Si ( EXISTE (Pb.Tab_NL.&It_NL) Poi_int ) ;                              
UNL_proj = (EXTR (FamiFIni.&It_Impo) (Pb.Tab_NL.&It_NL.Dir_int)         
(Pb.Tab_NL.&It_NL.Poi_int)) * (Pb.Tab_NL.&It_NL.fac_int) ;              
SiNon ;                                                                 
UNL_proj = XTY (Pb.Tab_NL.&It_NL.ch_depen) (FamiFIni.&It_Impo) LFOR L_f;
FinSi ;                                                                 
NL_proj.Eva_Impo.&It_NL.&It_Impo.u = UNL_proj * (FamiGIni.&It_Impo.u) ; 
NL_proj.Eva_Impo.&It_NL.&It_Impo.v = UNL_proj * (FamiGIni.&It_Impo.v) ; 
Fin It_Impo ;                                                           
FinSi ;                                                                 
CHP1 = MANU 'CHPO' MAI1 LISF_ini Lis_Init;                              
NL_proj.Ff_init.&It_NL = CHP1;                                          
CHP1 = MANU 'CHPO' MAI1 LISF_tot Lis_Ffi;                               
NL_proj.Ffi.&It_NL = CHP1;                                              
CHP1 = MANU 'CHPO' MAI1 LISU_ini Lis_Dfi;                               
NL_proj.Dfi.&It_NL = CHP1;                                              
FIN It_NL ;                                                             
FinSi ;                                                                 
* Matrice Pij =                                                         
* [  fi*K*fj     fi*C*fj     fi*M*fj ;                                  
*   -dt*gamma       1           0    ;                                  
*   -beta*dt^2      0           1   ];                                  
* Matrice des Pij assembles                                             
REPETER It_1 TaiSys;                                                    
REPETER It_2 3;                                                         
Ind_Lign = ((&It_1-1)*3) + (&It_2-1) + 1;                               
Si (&It_2 ega 1);                                                       
REPETER It_3 TaiSys;                                                    
f_ligne = FamiF.Cal.&It_1;                                              
REPETER It_4 3;                                                         
f_colo = FamiF.Cal.&It_3;                                               
ind_List = (Ind_Lign-1)*(TaiSys*3)                                      
+ ((&It_3-1)*3) + &It_4;                                                
Si (&It_4 ega 1);                                                       
Val1 = YTMX f_colo f_ligne M ;                                          
ind_Init = ((&It_1 - 1) *TaiSys)                                        
+ (&It_3 - 1) + 1 ;                                                     
REMPLACER Lis1Init ind_Init Val1;                                       
FinSi ;                                                                 
Si (&It_4 ega 2);                                                       
Val1 = YTMX f_colo f_ligne C ;                                          
FinSi ;                                                                 
Si (&It_4 ega 3);                                                       
Val1 = YTMX f_colo f_ligne K ;                                          
FinSi ;                                                                 
REMPLACER Lis1Up ind_List Val1;                                         
FIN It_4;                                                               
FIN It_3;                                                               
FinSi ;                                                                 
Si (&It_2 ega 2);                                                       
ind_List = (Ind_Lign-1)*(TaiSys*3) + (Ind_Lign-2) + 1;                  
Val1 = (-1)*(dt*gamma);                                                 
REMPLACER Lis1Up ind_List Val1;                                         
ind_List = ind_List + 1;                                                
REMPLACER Lis1Up ind_List 1.;                                           
FinSi ;                                                                 
Si (&It_2 ega 3);                                                       
ind_List = (Ind_Lign-1)*(TaiSys*3) + (Ind_Lign-3) + 1;                  
Val1 = (-1)*(beta*(dt**2));                                             
REMPLACER Lis1Up ind_List Val1;                                         
ind_List = ind_List + 2;                                                
REMPLACER Lis1Up ind_List 1.;                                           
FinSi ;                                                                 
FIN It_2;                                                               
FIN It_1;                                                               
PremInit = MANU 'RIGIDITE' 'TYPE' 'RIGIDITE' MAI1 LISU_ini              
'DUAL' LISF_ini 'QUEL' Lis1Init ;                                       
PremMemb = MANU 'RIGIDITE' 'TYPE' 'RIGIDITE' MAI1 LISU_tot              
'DUAL' LISF_tot 'QUEL' Lis1Up ;                                         
New_Fami = TABLE;                                                       
REPETER It_1 TaiSys;                                                    
New_Fami.&It_1 = TABLE;                                                 
FIN It_1;                                                               
REPETER It_T En_Nb_Re;                                                  
Si (&It_T ega 1);                                                       
* Assemblage du second membre                                           
Si (NbCharg > 0);                                                       
SecoMemb = AAYZ 1 (Cha_proj.Ff_init) ;                                  
FinSi ;                                                                 
Si (NbModIni > 0) ;                                                     
CHP1 = AAZZ VRAI LISF_ini ;                                             
Si (NbCharg > 0) ;                                                      
SecoMemb = SecoMemb - CHP1 ;                                            
SiNon ;                                                                 
SecoMemb = (-1) * CHP1 ;                                                
FinSi ;                                                                 
FinSi ;                                                                 
Si (Nb_NL > 0) ;                                                        
REPETER It_NL Nb_NL ;                                                   
CHP_01 FT_NL_T Bool_Max = ABGZ &It_NL &It_T (NL_proj.Ff_init) ;         
Si ( &It_NL ega 1) ;                                                    
CHP1 = CHP_01 ;                                                         
F_NL_T = FT_NL_T;                                                       
SiNon ;                                                                 
CHP1 = CHP_01 + CHP1 ;                                                  
F_NL_T = FT_NL_T + F_NL_T;                                              
FinSi ;                                                                 
Fin It_NL ;                                                             
L_F_NL = L_F_NL et (PROG F_NL_T);                                       
Bool_1 = ( OU (NbCharg > 0) (NbModIni > 0) ) ;                          
Si Bool_1 ;                                                             
SecoMemb = SecoMemb + CHP1 ;                                            
SiNon ;                                                                 
SecoMemb = CHP1 ;                                                       
FinSi ;                                                                 
FinSi ;                                                                 
Vec_GIni = RESO PremInit SecoMemb;                                      
REPETER It_1 TaiSys;                                                    
mot1 = EXTR LISU_ini &It_1;                                             
New_Fami.&It_1.w = PROG (EXTR Vec_GIni mot1 P_1);                       
New_Fami.&It_1.v = PROG 0;                                              
New_Fami.&It_1.u = PROG 0;                                              
FIN It_1;                                                               
SiNon ;                                                                 
Si (NbCharg > 0);                                                       
SecoMemb = AAYZ &It_T (Cha_proj.Ffi) ;                                  
FinSi ;                                                                 
Si (NbModIni > 0) ;                                                     
CHP1 = AAZZ FAUX LISF_tot ;                                             
Si (NbCharg > 0) ;                                                      
SecoMemb = SecoMemb - CHP1 ;                                            
SiNon ;                                                                 
SecoMemb = (-1) * CHP1 ;                                                
FinSi ;                                                                 
FinSi ;                                                                 
Lis_Seco = PROG;                                                        
REPETER It_1 TaiSys;                                                    
g_W_m1 = EXTR New_Fami.&It_1.w (&It_T - 1);                             
g_V_m1 = EXTR New_Fami.&It_1.v (&It_T - 1);                             
g_U_m1 = EXTR New_Fami.&It_1.u (&It_T - 1);                             
pred_V = (g_V_m1 + ((dt*(1-gamma)) * g_W_m1));                          
pred_U = (g_U_m1 + (dt*g_V_m1) + ((dt**2)*(0.5-beta)*g_W_m1));          
Lis_Seco = Lis_Seco ET (PROG 0. pred_V pred_U);                         
FIN It_1;                                                               
Seco_2 = MANU 'CHPO' MAI1 LISF_tot Lis_Seco;                            
SecoMemb = SecoMemb + Seco_2;                                           
Si (Nb_NL > 0) ;                                                        
Vec_G_T = ABPZ SecoMemb &It_T 'Upd' Up_Pt_Fx ;                          
SiNon ;                                                                 
Vec_G_T = RESO PremMemb SecoMemb;                                       
FinSi ;                                                                 
REPETER It_1 TaiSys;                                                    
mot1 = EXTR LISU_tot (((&It_1 - 1) * 3) + 1);                           
New_Fami.&It_1.w = New_Fami.&It_1.w ET (PROG (EXTR Vec_G_T mot1 P_1));  
mot1 = EXTR LISU_tot (((&It_1 - 1) * 3) + 2);                           
New_Fami.&It_1.v = New_Fami.&It_1.v ET (PROG (EXTR Vec_G_T mot1 P_1));  
mot1 = EXTR LISU_tot (((&It_1 - 1) * 3) + 3);                           
New_Fami.&It_1.u = New_Fami.&It_1.u ET (PROG (EXTR Vec_G_T mot1 P_1));  
FIN It_1;                                                               
FinSi ;                                                                 
Fin It_T ;                                                              
RESPRO New_Fami;                                                        
FINPROC;                                                                
DEBPROC ABYZ ;                                                          
Si ((VALE 'DIME') > 2) ;                                                
P_0 = 0. 0. 0. ;                                                        
SiNon ;                                                                 
P_0 = 0. 0. ;                                                           
FinSi ;                                                                 
MAI_0 = MANU POI1 P_0  ;                                                
RESPRO P_0 ;                                                            
RESPRO MAI_0 ;                                                          
FINPROC;                                                                
DEBPROC AAZZ Bool_Ini*LOGIQUE Lis_Comp*LISTMOTS;                        
REPETER It_1 NbModIni ;                                                 
Lis_gIni = PROG ( EXTR Tab_Ini.&It_1.g.w &It_T)                         
( EXTR Tab_Ini.&It_1.g.v &It_T)                                         
( EXTR Tab_Ini.&It_1.g.u &It_T) ;                                       
CHP2 = MANU 'CHPO' MAI1 LIS_V_2 Lis_gIni ;                              
Lis_SIni = PROG;                                                        
REPETER It_2 TaiSys;                                                    
FIni_Fi = Tab_Ini.&It_1 .&It_2 ;                                        
Val1 = XTY FIni_Fi CHP2 LIS_V_1 LIS_V_2;                                
SI Bool_Ini ;                                                           
Lis_SIni = Lis_SIni et (PROG Val1) ;                                    
SiNon ;                                                                 
Lis_SIni = Lis_SIni et (PROG Val1 0. 0.) ;                              
FinSi ;                                                                 
FIN It_2;                                                               
CHP2 = MANU 'CHPO' MAI1 Lis_Comp Lis_SIni ;                             
Fin It_1 ;                                                              
RESPRO CHP2;                                                            
FINPROC;                                                                
TEMPS;                                                                  
opti donn 5 ;                                                           
opti donn 3;                                                            
*OPTI TRAC PSC;                                                         
ErrDep ErrEner = AAPZ 'PGD' DirPriv VRAI;                               
AffMods = LECT 1 2 3 4;                                                 
AffSolu = LECT 1 2 3 4;                                                 
AAKZ PGD AffMods AffSolu P_intere DirPriv (Pb.lambda) 'U';              
AAOZ AffMods (FamiF.Cal);                                               
DEBPROC AAOZ AffMods*ListEnti FamiEsp*TABLE;                            
NbMod = DIMENSION FamiEsp;                                              
NbMax = MAXI AffMods;                                                   
Si (NbMax > NbMod);                                                     
Mess 'Il n y a que ' NbMod ' modes';                                    
opti donn 5;                                                            
FinSi ;                                                                 
DEF0 = DEFO (Pb.geo) 0 (FamiEsp.1);                                     
trac DEF0;                                                              
LMot = MOTS 'ROUG' 'BLEU' 'VERT' 'JAUN' 'VIOL' 'TURQ';                  
REPETER It (DIMENSION AffMods);                                         
col = EXTR LMot &It;                                                    
NumMod = EXTR AffMods &It;                                              
Si (&It ega 1) ;                                                        
DEFA = (DEF0 ET (DEFO Pb.geo FamiEsp.NumMod col));                      
Trac DEFA;                                                              
SiNon ;                                                                 
DEFA = (DEFA ET (DEFO Pb.geo FamiEsp.NumMod col));                      
TRAC DEFA;                                                              
FinSi ;                                                                 
Fin It;                                                                 
*trac DEFA;                                                             
FINPROC;                                                                
fin;                                                                    
